Reactive_JJ rules_NNS inference_NN from_IN dynamic_JJ dependency_NN models_NNS
Defining_VBG dependency_NN models_NNS is_VBZ sometimes_RB an_DT easier_JJR ,_, more_RBR intuitive_JJ way_NN for_IN ontology_NN representation_NN than_IN defining_VBG reactive_JJ rules_NNS directly_RB ,_, as_IN it_PRP provides_VBZ a_DT higher_JJR level_NN of_IN abstraction_NN ._.
We_PRP will_MD shortly_RB introduce_VB the_DT ADI_NNP -LRB-_-LRB- Active_JJ Dependency_NN Integration_NN -RRB-_-RRB- model_NN capabilities_NNS ,_, emphasizing_VBG new_JJ developments_NNS :_: 1_CD ._.
Support_NN of_IN automatic_JJ dependencies_NNS instantiation_NN from_IN an_DT abstract_JJ definition_NN that_WDT expresses_VBZ a_DT general_JJ dependency_NN in_IN the_DT ontology_NN ,_, namely_RB a_DT ``_`` template_NN ''_'' ._.
2_CD ._.
Inference_NN of_IN rules_NNS for_IN dynamic_JJ dependency_NN models_NNS where_WRB dependencies_NNS and_CC entities_NNS may_MD be_VB inserted_VBN deleted_VBN and_CC updated_VBN ._.
We_PRP use_VBP the_DT eTrade_NNP example_NN in_IN order_NN to_TO exemplify_VB those_DT capabilities_NNS ._.
n_NN entities_NNS ._.
1_CD ._.
INTRODUCTION_NN Dependencies_NNS of_IN many_JJ types_NNS are_VBP common_JJ in_IN enterprise_NN systems_NNS ._.
They_PRP express_VBP the_DT exact_JJ way_NN in_IN which_WDT entities_NNS affect_VBP other_JJ entities_NNS ,_, and_CC closely_RB related_JJ issues_NNS were_VBD pointed_VBN in_IN =_JJ -_: =[_NN 1_CD -RRB-_-RRB- -_: =_SYM -_: as_IN a_DT major_JJ challenge_NN ._.
Some_DT examples_NNS are_VBP :_: 1_CD ._.
An_DT internet_NN access_NN provider_NN allocates_VBZ bandwidth_NN for_IN clients_NNS considering_VBG the_DT current_JJ load_NN and_CC the_DT type_NN of_IN service_NN level_NN agreement_NN that_IN each_DT customer_NN has_VBZ ._.
An_DT
an_DT reactive_JJ rules_NNS ,_, concentrating_VBG on_IN dependencies_NNS ._.
2_CD ._.
ADI_NNP MODEL_NNP AND_NNP DEVELOPMENTS_NNP ADI_NNP models_NNS an_DT ontology_NN using_VBG entities_NNS and_CC dependencies_NNS between_IN them_PRP ._.
A_DT comprehensive_JJ description_NN of_IN ADI_NNP can_MD be_VB found_VBN in_IN =_JJ -_: =[_NN 2_CD -RRB-_-RRB- ._.
In_IN general_JJ ,_, ontolo_JJ -_: =_SYM -_: gy_IN modeling_NN consists_VBZ of_IN :_: 1_CD ._.
Defining_VBG the_DT types_NNS of_IN the_DT entities_NNS and_CC dependencies_NNS that_WDT can_MD exist_VB in_IN it_PRP -LRB-_-LRB- ``_`` Dependency_NN Types_NNS ''_'' and_CC ``_`` Entity_NN Types_NNS ''_'' in_IN -LRB-_-LRB- 2_CD -RRB-_-RRB- -RRB-_-RRB- ._.
2_CD ._.
Defining_VBG instances_NNS of_IN those_DT
ract_NN dependency_NN ._.
If_IN a_DT dependency_NN with_IN the_DT same_JJ context_NN does_VBZ not_RB exist_VB a_DT new_JJ one_CD is_VBZ created_VBN and_CC all_PDT the_DT entities_NNS that_WDT have_VBP the_DT same_JJ context_NN are_VBP added_VBN to_TO it_PRP ._.
Dependencies_NNS in_IN ADI_NNP are_VBP resolved_VBN using_VBG AMIT_NN =_JJ -_: =[_NN 2,3_CD -RRB-_-RRB- -_: =_JJ -_: ,_, a_DT reactive_JJ rule_NN engine_NN ._.
Intuitively_RB ,_, one_CD expects_VBZ that_IN a_DT different_JJ set_NN of_IN reactive_JJ rules_NNS will_MD be_VB arranged_VBN for_IN every_DT model_NN according_VBG to_TO its_PRP$ topology_NN ._.
However_RB ,_, we_PRP have_VBP been_VBN able_JJ to_TO develop_VB a_DT generic_JJ se_FW
