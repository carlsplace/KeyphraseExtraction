Service-oriented_JJ data_NNS denormalization_NN for_IN scalable_JJ web_NN applications_NNS
Many_JJ techniques_NNS have_VBP been_VBN proposed_VBN to_TO scale_VB web_NN applications_NNS ._.
However_RB ,_, the_DT data_NNS interdependencies_NNS between_IN the_DT database_NN queries_NNS and_CC transactions_NNS issued_VBN by_IN the_DT applications_NNS limit_VBP their_PRP$ efficiency_NN ._.
We_PRP claim_VBP that_IN major_JJ scalability_NN improvements_NNS can_MD be_VB gained_VBN by_IN restructuring_VBG the_DT web_NN application_NN data_NNS into_IN multiple_JJ independent_JJ data_NNS services_NNS with_IN exclusive_JJ access_NN to_TO their_PRP$ private_JJ data_NNS store_NN ._.
While_IN this_DT restructuring_NN does_VBZ not_RB provide_VB performance_NN gains_NNS by_IN itself_PRP ,_, the_DT implied_JJ simplification_NN of_IN each_DT database_NN workload_NN allows_VBZ a_DT much_RB more_RBR efficient_JJ use_NN of_IN classical_JJ techniques_NNS ._.
We_PRP illustrate_VBP the_DT data_NNS denormalization_NN process_NN on_IN three_CD benchmark_JJ applications_NNS :_: TPC-W_NN ,_, RUBiS_NN and_CC RUBBoS_NN ._.
We_PRP deploy_VBP the_DT resulting_VBG service-oriented_JJ implementation_NN of_IN TPC-W_NN across_IN an_DT 85-node_JJ cluster_NN and_CC show_VBP that_IN restructuring_VBG its_PRP$ data_NNS can_MD provide_VB at_IN least_JJS an_DT order_NN of_IN magnitude_NN improvement_NN in_IN the_DT maximum_NN sustainable_JJ throughput_NN compared_VBN to_TO master-slave_JJ database_NN replication_NN ,_, while_IN preserving_VBG strong_JJ consistency_NN and_CC transactional_JJ properties_NNS ._.
e_LS data_NN concern-aware_NN service_NN engineering_NN process_NN ._.
Arrow_NNP lines_NNS indicate_VBP control_NN flows_NNS ._.
data_NNS in_IN relational_JJ database_NN is_VBZ supported_VBN by_IN mapping_NN Web_NN services_NNS operations_NNS to_TO SQL_NN and_CC data_NN query_NN operations_NNS -LRB-_-LRB- 4_CD -RRB-_-RRB- ,_, =_JJ -_: =[_NN 5_CD -RRB-_-RRB- -_: =_JJ -_: and_CC by_IN SOAP_NN service_NN wrapping_VBG to_TO SQL_NN database_NN -LRB-_-LRB- 6_CD -RRB-_-RRB- while_IN XML_NN and_CC RDF_NN data_NNS can_MD be_VB accessed_VBN via_IN Web_NN services_NNS operations_NNS using_VBG XQuery\/SPASQL_NN ._.
â€¢_CD unstructured_JJ data_NNS is_VBZ typically_RB accessed_VBN by_IN first_JJ mapping_NN ser_NN
names_NNS ,_, which_WDT are_VBP prepended_VBN with_IN the_DT column_NN family_NN names_NNS ._.
Therefore_RB ,_, we_PRP first_RB adapt_VBP the_DT relational_JJ data_NNS model_NN of_IN TPC-W_NN into_IN the_DT Bigtable_JJ data_NN model_NN ._.
Using_VBG similar_JJ data_NNS denormalization_NN techniques_NNS as_IN in_IN =_JJ -_: =[_NN 53_CD -RRB-_-RRB- -_: =_JJ -_: ,_, we_PRP design_VBP a_DT Bigtable_JJ data_NN model_NN for_IN TPC-W_NN that_WDT contains_VBZ the_DT data_NNS accessed_VBN by_IN the_DT transactions_NNS in_IN Figure_NNP 4_CD ._.
The_DT relational_JJ data_NNS model_NN of_IN TPC-W_NN comprises_VBZ six_CD tables_NNS that_WDT are_VBP accessed_VBN by_IN these_DT transact_VB
names_NNS ,_, which_WDT are_VBP prepended_VBN with_IN the_DT column_NN family_NN names_NNS ._.
Therefore_RB ,_, we_PRP first_RB adapt_VBP the_DT relational_JJ data_NNS model_NN of_IN TPC-W_NN into_IN the_DT Bigtable_JJ data_NN model_NN ._.
Using_VBG similar_JJ data_NNS denormalization_NN techniques_NNS as_IN in_IN =_JJ -_: =[_NN 46_CD -RRB-_-RRB- -_: =_JJ -_: ,_, we_PRP designed_VBD a_DT Bigtable_JJ data_NN model_NN for_IN TPCW_NN that_WDT contains_VBZ the_DT data_NNS accessed_VBN by_IN the_DT transactions_NNS in_IN Figure_NNP 4_CD ._.
The_DT relational_JJ data_NNS model_NN of_IN TPC-W_NN comprises_VBZ six_CD tables_NNS that_WDT are_VBP accessed_VBN by_IN these_DT transac_NN
._.
We_PRP adapted_VBD the_DT original_JJ relational_JJ data_NNS model_NN defined_VBN by_IN TPC-W_NN to_TO the_DT Bigtable_JJ data_NN model_NN ,_, so_IN that_IN the_DT application_NN data_NNS can_MD be_VB stored_VBN into_IN HBase_NN ._.
Using_VBG similar_JJ data_NNS denormalization_NN techniques_NNS as_IN in_IN =_JJ -_: =[_NN 18_CD -RRB-_-RRB- -_: =_JJ -_: ,_, we_PRP designed_VBD a_DT Bigtable_JJ data_NN model_NN for_IN TPC-W_NN that_WDT contains_VBZ only_RB the_DT columns_NNS accessed_VBN by_IN the_DT transactions_NNS in_IN Figure_NNP 2_CD ._.
The_DT relational_JJ data_NNS model_NN of_IN TPC-W_NN comprises_VBZ six_CD tables_NNS that_WDT are_VBP accessed_VBN by_IN thes_NNS
ads_NNS that_IN one_PRP should_MD expect_VB in_IN real_JJ deployments_NNS ,_, a_DT variety_NN of_IN techniques_NNS exist_VBP to_TO dictate_VB when_WRB and_CC how_WRB extra_JJ servers_NNS should_MD be_VB added_VBN or_CC removed_VBN from_IN each_DT individual_JJ data_NNS service_NN of_IN our_PRP$ implementations_NNS =_JJ -_: =[_NN 1_CD ,_, 7_CD ,_, 35_CD -RRB-_-RRB- -_: =_SYM -_: ._.
We_PRP compare_VBP three_CD implementations_NNS of_IN TPC-W_NN ._.
``_`` OTW_NNP ''_'' represents_VBZ the_DT unmodified_JJ original_JJ TPC-W_NN implementation_NN ._.
We_PRP then_RB compare_VBP its_PRP$ performance_NN to_TO ``_`` DTW_NNP ''_'' ,_, which_WDT represents_VBZ the_DT denormalized_VBN TPC-W_NN where_WRB no_DT p_NN
cation_NN data_NNS access_NN behavior_NN ._.
Database_NN query_NN caching_NN relies_VBZ on_IN high_JJ temporal_JJ locality_NN ,_, and_CC uses_VBZ prior_JJ knowledge_NN of_IN data_NNS overlap_VBP between_IN different_JJ query_NN templates_NNS to_TO efficiently_RB implement_VB invalidations_NNS =_JJ -_: =[_NN 2_CD ,_, 4_CD ,_, 21_CD ,_, 30_CD -RRB-_-RRB- -_: =_SYM -_: ._.
A_DT query_NN template_NN is_VBZ a_DT parametrized_JJ SQL_NN query_NN whose_WP$ parameter_NN values_NNS are_VBP passed_VBN to_TO the_DT system_NN at_IN runtime_NN ._.
Partial_JJ replication_NN techniques_NNS use_VBP similar_JJ information_NN to_TO reduce_VB the_DT data_NNS replication_NN degree_NN
cess_NN to_TO the_DT application_NN data_NNS ._.
Replication_NN is_VBZ a_DT common_JJ technique_NN to_TO improve_VB the_DT throughput_NN of_IN a_DT RDBMS_NN ._.
Many_JJ RDBMS_NN replication_NN solutions_NNS aim_VBP at_IN replicating_VBG data_NNS across_IN multiple_JJ servers_NNS within_IN a_DT cluster_NN =_JJ -_: =[_NN 5_CD ,_, 18_CD ,_, 23_CD ,_, 25_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Database_NN replication_NN allows_VBZ one_CD to_TO distribute_VB read_NN queries_NNS among_IN the_DT replicas_NNS ._.
However_RB ,_, in_IN these_DT solutions_NNS ,_, all_DT UDI_NNP queries_NNS must_MD first_RB be_VB executed_VBN at_IN a_DT master_NN database_NN ,_, then_RB propagated_VBN and_CC re-execut_NN
n_NN a_DT Web_NN application_NN along_IN such_PDT a_DT service-oriented_JJ architecture_NN with_IN simplified_VBN workload_NN ._.
Data_NN fragmentation_NN techniques_NNS have_VBP been_VBN commonly_RB used_VBN in_IN the_DT design_NN of_IN distributed_VBN relational_JJ database_NN systems_NNS =_JJ -_: =[_NN 15_CD ,_, 19_CD ,_, 20_CD ,_, 22_CD -RRB-_-RRB- -_: =_SYM -_: ._.
In_IN these_DT works_NNS ,_, tables_NNS are_VBP partitioned_VBN either_CC vertically_RB or_CC horizontally_RB into_IN smaller_JJR fragments_NNS ._.
Partitioning_NN schemes_NNS are_VBP determined_VBN according_VBG to_TO a_DT workload_NN analysis_NN in_IN order_NN to_TO optimize_VB access_NN time_NN
ase_NN transactions_NNS -RRB-_-RRB- ._.
In_IN contrast_NN ,_, our_PRP$ proposal_NN also_RB relies_VBZ to_TO a_DT certain_JJ extent_NN on_IN partial_JJ data_NNS replication_NN ,_, but_CC at_IN a_DT much_JJ finer_NN granularity_NN which_WDT allows_VBZ one_CD to_TO reduce_VB the_DT data_NNS placement_NN constraints_NNS ._.
In_IN =_JJ -_: =[_NN 11_CD -RRB-_-RRB- -_: =_JJ -_: ,_, the_DT authors_NNS propose_VBP an_DT edge_NN computing_NN infrastructure_NN where_WRB the_DT application_NN programmers_NNS can_MD choose_VB the_DT best_JJS suited_VBN data_NNS replication_NN and_CC distribution_NN strategies_NNS for_IN the_DT different_JJ parts_NNS of_IN application_NN
n_NN a_DT Web_NN application_NN along_IN such_PDT a_DT service-oriented_JJ architecture_NN with_IN simplified_VBN workload_NN ._.
Data_NN fragmentation_NN techniques_NNS have_VBP been_VBN commonly_RB used_VBN in_IN the_DT design_NN of_IN distributed_VBN relational_JJ database_NN systems_NNS =_JJ -_: =[_NN 15_CD ,_, 19_CD ,_, 20_CD ,_, 22_CD -RRB-_-RRB- -_: =_SYM -_: ._.
In_IN these_DT works_NNS ,_, tables_NNS are_VBP partitioned_VBN either_CC vertically_RB or_CC horizontally_RB into_IN smaller_JJR fragments_NNS ._.
Partitioning_NN schemes_NNS are_VBP determined_VBN according_VBG to_TO a_DT workload_NN analysis_NN in_IN order_NN to_TO optimize_VB access_NN time_NN
ing_JJ monolithic_JJ applications_NNS we_PRP show_VBP how_WRB one_PRP can_MD denormalize_VB the_DT data_NNS into_IN data_NNS services_NNS ._.
To_TO demonstrate_VB the_DT effectiveness_NN of_IN our_PRP$ proposal_NN ,_, we_PRP study_VBD three_CD web_NN application_NN benchmarks_NNS :_: TPC-W_NN -LRB-_-LRB- 32_CD -RRB-_-RRB- ,_, RUBiS_NN =_JJ -_: =[_NN 3_CD -RRB-_-RRB- -_: =_JJ -_: and_CC RUBBoS_NN -LRB-_-LRB- 26_CD -RRB-_-RRB- ._.
We_PRP show_VBP how_WRB these_DT applications_NNS can_MD be_VB restructured_VBN into_IN multiple_JJ independent_JJ data_NNS services_NNS ,_, each_DT with_IN a_DT very_RB simple_JJ data_NNS access_NN pattern_NN ._.
We_PRP then_RB focus_VB on_IN the_DT UDI-intensive_JJ data_NNS servi_VBP
cess_NN to_TO the_DT application_NN data_NNS ._.
Replication_NN is_VBZ a_DT common_JJ technique_NN to_TO improve_VB the_DT throughput_NN of_IN a_DT RDBMS_NN ._.
Many_JJ RDBMS_NN replication_NN solutions_NNS aim_VBP at_IN replicating_VBG data_NNS across_IN multiple_JJ servers_NNS within_IN a_DT cluster_NN =_JJ -_: =[_NN 5_CD ,_, 18_CD ,_, 23_CD ,_, 25_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Database_NN replication_NN allows_VBZ one_CD to_TO distribute_VB read_NN queries_NNS among_IN the_DT replicas_NNS ._.
However_RB ,_, in_IN these_DT solutions_NNS ,_, all_DT UDI_NNP queries_NNS must_MD first_RB be_VB executed_VBN at_IN a_DT master_NN database_NN ,_, then_RB propagated_VBN and_CC re-execut_NN
L_NN query_NN whose_WP$ parameter_NN values_NNS are_VBP passed_VBN to_TO the_DT system_NN at_IN runtime_NN ._.
Partial_JJ replication_NN techniques_NNS use_VBP similar_JJ information_NN to_TO reduce_VB the_DT data_NNS replication_NN degree_NN and_CC limit_VB the_DT cost_NN of_IN database_NN updates_NNS =_JJ -_: =[_NN 14_CD ,_, 29_CD -RRB-_-RRB- -_: =_SYM -_: ._.
However_RB ,_, we_PRP observe_VBP that_IN these_DT techniques_NNS work_VBP best_RB under_IN very_RB simple_JJ workloads_NNS composed_VBN only_RB of_IN a_DT few_JJ different_JJ query_NN templates_NNS ._.
When_WRB the_DT number_NN of_IN templates_NNS grows_VBZ ,_, an_DT increasing_VBG number_NN of_IN constrai_NNS
cation_NN data_NNS access_NN behavior_NN ._.
Database_NN query_NN caching_NN relies_VBZ on_IN high_JJ temporal_JJ locality_NN ,_, and_CC uses_VBZ prior_JJ knowledge_NN of_IN data_NNS overlap_VBP between_IN different_JJ query_NN templates_NNS to_TO efficiently_RB implement_VB invalidations_NNS =_JJ -_: =[_NN 2_CD ,_, 4_CD ,_, 21_CD ,_, 30_CD -RRB-_-RRB- -_: =_SYM -_: ._.
A_DT query_NN template_NN is_VBZ a_DT parametrized_JJ SQL_NN query_NN whose_WP$ parameter_NN values_NNS are_VBP passed_VBN to_TO the_DT system_NN at_IN runtime_NN ._.
Partial_JJ replication_NN techniques_NNS use_VBP similar_JJ information_NN to_TO reduce_VB the_DT data_NNS replication_NN degree_NN
cation_NN data_NNS access_NN behavior_NN ._.
Database_NN query_NN caching_NN relies_VBZ on_IN high_JJ temporal_JJ locality_NN ,_, and_CC uses_VBZ prior_JJ knowledge_NN of_IN data_NNS overlap_VBP between_IN different_JJ query_NN templates_NNS to_TO efficiently_RB implement_VB invalidations_NNS =_JJ -_: =[_NN 2_CD ,_, 4_CD ,_, 21_CD ,_, 30_CD -RRB-_-RRB- -_: =_SYM -_: ._.
A_DT query_NN template_NN is_VBZ a_DT parametrized_JJ SQL_NN query_NN whose_WP$ parameter_NN values_NNS are_VBP passed_VBN to_TO the_DT system_NN at_IN runtime_NN ._.
Partial_JJ replication_NN techniques_NNS use_VBP similar_JJ information_NN to_TO reduce_VB the_DT data_NNS replication_NN degree_NN
cess_NN to_TO the_DT application_NN data_NNS ._.
Replication_NN is_VBZ a_DT common_JJ technique_NN to_TO improve_VB the_DT throughput_NN of_IN a_DT RDBMS_NN ._.
Many_JJ RDBMS_NN replication_NN solutions_NNS aim_VBP at_IN replicating_VBG data_NNS across_IN multiple_JJ servers_NNS within_IN a_DT cluster_NN =_JJ -_: =[_NN 5_CD ,_, 18_CD ,_, 23_CD ,_, 25_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Database_NN replication_NN allows_VBZ one_CD to_TO distribute_VB read_NN queries_NNS among_IN the_DT replicas_NNS ._.
However_RB ,_, in_IN these_DT solutions_NNS ,_, all_DT UDI_NNP queries_NNS must_MD first_RB be_VB executed_VBN at_IN a_DT master_NN database_NN ,_, then_RB propagated_VBN and_CC re-execut_NN
e_LS techniques_NNS do_VBP not_RB fundamentally_RB change_VB the_DT structure_NN of_IN the_DT data_NNS ,_, which_WDT limits_VBZ their_PRP$ efficiency_NN ._.
Furthermore_RB ,_, changes_NNS in_IN the_DT workload_NN require_VB to_TO constantly_RB re-evaluate_VB the_DT data_NNS fragmentation_NN scheme_NN =_JJ -_: =[_NN 17_CD -RRB-_-RRB- -_: =_SYM -_: ._.
We_PRP consider_VBP that_IN dynamic_JJ environments_NNS such_JJ as_IN Web_NN applications_NNS would_MD make_VB such_JJ an_DT approach_NN impractical_JJ ._.
In_IN contrast_NN ,_, we_PRP propose_VBP a_DT one-time_JJ modification_NN in_IN the_DT application_NN data_NN structure_NN ._.
Further_JJ wor_NN
tly_RB according_VBG to_TO its_PRP$ own_JJ load_NN ._.
Even_RB though_IN data_NNS denormalization_NN is_VBZ largely_RB applied_VBN to_TO improve_VB the_DT performance_NN of_IN individual_JJ databases_NNS ,_, few_JJ research_NN efforts_NNS have_VBP been_VBN made_VBN to_TO systematically_RB study_VB them_PRP =_JJ -_: =[_NN 27_CD ,_, 28_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Data_NN denormalization_NN often_RB creates_VBZ data_NNS redundancy_NN by_IN adding_VBG extra_JJ fields_NNS to_TO existing_VBG tables_NNS so_RB that_IN expensive_JJ join_VB queries_NNS can_MD be_VB rewritten_VBN into_IN simpler_JJR queries_NNS ._.
This_DT approach_NN implicitly_RB assumes_VBZ th_DT
cal_JJ techniques_NNS to_TO each_DT individual_JJ service_NN ._.
Several_JJ recent_JJ academic_JJ and_CC industrial_JJ research_NN efforts_NNS have_VBP focused_VBN on_IN the_DT design_NN of_IN specialized_JJ data_NNS structures_NNS for_IN scalable_JJ and_CC highly_RB available_JJ services_NNS =_JJ -_: =[_NN 6_CD ,_, 10_CD ,_, 13_CD -RRB-_-RRB- -_: =_SYM -_: ._.
These_DT systems_NNS usually_RB provide_VBP a_DT simple_JJ key-based_JJ put\/get_NN interface_NN and_CC focus_NN on_IN scalability_NN and_CC availability_NN properties_NNS rather_RB than_IN rich_JJ functionality_NN or_CC transactional_JJ properties_NNS ._.
These_DT design_NN choic_JJ
techniques_NNS have_VBP been_VBN proposed_VBN to_TO improve_VB the_DT scalability_NN of_IN web_NN applications_NNS ._.
The_DT simplest_JJS one_NN is_VBZ edgeserver_NN computing_NN where_WRB requests_NNS are_VBP distributed_VBN among_IN several_JJ edge_NN servers_NNS running_VBG the_DT same_JJ code_NN =_JJ -_: =[_NN 9_CD ,_, 24_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Although_IN this_DT technique_NN is_VBZ very_RB effective_JJ at_IN scaling_VBG the_DT computation_NN part_NN of_IN the_DT applications_NNS ,_, the_DT main_JJ challenge_NN is_VBZ to_TO scale_VB the_DT access_NN to_TO the_DT application_NN data_NNS ._.
Replication_NN is_VBZ a_DT common_JJ technique_NN to_TO
n_NN a_DT Web_NN application_NN along_IN such_PDT a_DT service-oriented_JJ architecture_NN with_IN simplified_VBN workload_NN ._.
Data_NN fragmentation_NN techniques_NNS have_VBP been_VBN commonly_RB used_VBN in_IN the_DT design_NN of_IN distributed_VBN relational_JJ database_NN systems_NNS =_JJ -_: =[_NN 15_CD ,_, 19_CD ,_, 20_CD ,_, 22_CD -RRB-_-RRB- -_: =_SYM -_: ._.
In_IN these_DT works_NNS ,_, tables_NNS are_VBP partitioned_VBN either_CC vertically_RB or_CC horizontally_RB into_IN smaller_JJR fragments_NNS ._.
Partitioning_NN schemes_NNS are_VBP determined_VBN according_VBG to_TO a_DT workload_NN analysis_NN in_IN order_NN to_TO optimize_VB access_NN time_NN
techniques_NNS have_VBP been_VBN proposed_VBN to_TO improve_VB the_DT scalability_NN of_IN web_NN applications_NNS ._.
The_DT simplest_JJS one_NN is_VBZ edgeserver_NN computing_NN where_WRB requests_NNS are_VBP distributed_VBN among_IN several_JJ edge_NN servers_NNS running_VBG the_DT same_JJ code_NN =_JJ -_: =[_NN 9_CD ,_, 24_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Although_IN this_DT technique_NN is_VBZ very_RB effective_JJ at_IN scaling_VBG the_DT computation_NN part_NN of_IN the_DT applications_NNS ,_, the_DT main_JJ challenge_NN is_VBZ to_TO scale_VB the_DT access_NN to_TO the_DT application_NN data_NNS ._.
Replication_NN is_VBZ a_DT common_JJ technique_NN to_TO
r_NN ,_, for_IN existing_VBG monolithic_JJ applications_NNS we_PRP show_VBP how_WRB one_PRP can_MD denormalize_VB the_DT data_NNS into_IN data_NNS services_NNS ._.
To_TO demonstrate_VB the_DT effectiveness_NN of_IN our_PRP$ proposal_NN ,_, we_PRP study_VBD three_CD web_NN application_NN benchmarks_NNS :_: TPC-W_NN =_JJ -_: =[_NN 32_CD -RRB-_-RRB- -_: =_JJ -_: ,_, RUBiS_NN -LRB-_-LRB- 3_CD -RRB-_-RRB- and_CC RUBBoS_NN -LRB-_-LRB- 26_CD -RRB-_-RRB- ._.
We_PRP show_VBP how_WRB these_DT applications_NNS can_MD be_VB restructured_VBN into_IN multiple_JJ independent_JJ data_NNS services_NNS ,_, each_DT with_IN a_DT very_RB simple_JJ data_NNS access_NN pattern_NN ._.
We_PRP then_RB focus_VB on_IN the_DT UDI-intensive_JJ
cation_NN data_NNS access_NN behavior_NN ._.
Database_NN query_NN caching_NN relies_VBZ on_IN high_JJ temporal_JJ locality_NN ,_, and_CC uses_VBZ prior_JJ knowledge_NN of_IN data_NNS overlap_VBP between_IN different_JJ query_NN templates_NNS to_TO efficiently_RB implement_VB invalidations_NNS =_JJ -_: =[_NN 2_CD ,_, 4_CD ,_, 21_CD ,_, 30_CD -RRB-_-RRB- -_: =_SYM -_: ._.
A_DT query_NN template_NN is_VBZ a_DT parametrized_JJ SQL_NN query_NN whose_WP$ parameter_NN values_NNS are_VBP passed_VBN to_TO the_DT system_NN at_IN runtime_NN ._.
Partial_JJ replication_NN techniques_NNS use_VBP similar_JJ information_NN to_TO reduce_VB the_DT data_NNS replication_NN degree_NN
cess_NN to_TO the_DT application_NN data_NNS ._.
Replication_NN is_VBZ a_DT common_JJ technique_NN to_TO improve_VB the_DT throughput_NN of_IN a_DT RDBMS_NN ._.
Many_JJ RDBMS_NN replication_NN solutions_NNS aim_VBP at_IN replicating_VBG data_NNS across_IN multiple_JJ servers_NNS within_IN a_DT cluster_NN =_JJ -_: =[_NN 5_CD ,_, 18_CD ,_, 23_CD ,_, 25_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Database_NN replication_NN allows_VBZ one_CD to_TO distribute_VB read_NN queries_NNS among_IN the_DT replicas_NNS ._.
However_RB ,_, in_IN these_DT solutions_NNS ,_, all_DT UDI_NNP queries_NNS must_MD first_RB be_VB executed_VBN at_IN a_DT master_NN database_NN ,_, then_RB propagated_VBN and_CC re-execut_NN
L_NN query_NN whose_WP$ parameter_NN values_NNS are_VBP passed_VBN to_TO the_DT system_NN at_IN runtime_NN ._.
Partial_JJ replication_NN techniques_NNS use_VBP similar_JJ information_NN to_TO reduce_VB the_DT data_NNS replication_NN degree_NN and_CC limit_VB the_DT cost_NN of_IN database_NN updates_NNS =_JJ -_: =[_NN 14_CD ,_, 29_CD -RRB-_-RRB- -_: =_SYM -_: ._.
However_RB ,_, we_PRP observe_VBP that_IN these_DT techniques_NNS work_VBP best_RB under_IN very_RB simple_JJ workloads_NNS composed_VBN only_RB of_IN a_DT few_JJ different_JJ query_NN templates_NNS ._.
When_WRB the_DT number_NN of_IN templates_NNS grows_VBZ ,_, an_DT increasing_VBG number_NN of_IN constrai_NNS
cal_JJ techniques_NNS to_TO each_DT individual_JJ service_NN ._.
Several_JJ recent_JJ academic_JJ and_CC industrial_JJ research_NN efforts_NNS have_VBP focused_VBN on_IN the_DT design_NN of_IN specialized_JJ data_NNS structures_NNS for_IN scalable_JJ and_CC highly_RB available_JJ services_NNS =_JJ -_: =[_NN 6_CD ,_, 10_CD ,_, 13_CD -RRB-_-RRB- -_: =_SYM -_: ._.
These_DT systems_NNS usually_RB provide_VBP a_DT simple_JJ key-based_JJ put\/get_NN interface_NN and_CC focus_NN on_IN scalability_NN and_CC availability_NN properties_NNS rather_RB than_IN rich_JJ functionality_NN or_CC transactional_JJ properties_NNS ._.
These_DT design_NN choic_JJ
ads_NNS that_IN one_PRP should_MD expect_VB in_IN real_JJ deployments_NNS ,_, a_DT variety_NN of_IN techniques_NNS exist_VBP to_TO dictate_VB when_WRB and_CC how_WRB extra_JJ servers_NNS should_MD be_VB added_VBN or_CC removed_VBN from_IN each_DT individual_JJ data_NNS service_NN of_IN our_PRP$ implementations_NNS =_JJ -_: =[_NN 1_CD ,_, 7_CD ,_, 35_CD -RRB-_-RRB- -_: =_SYM -_: ._.
We_PRP compare_VBP three_CD implementations_NNS of_IN TPC-W_NN ._.
``_`` OTW_NNP ''_'' represents_VBZ the_DT unmodified_JJ original_JJ TPC-W_NN implementation_NN ._.
We_PRP then_RB compare_VBP its_PRP$ performance_NN to_TO ``_`` DTW_NNP ''_'' ,_, which_WDT represents_VBZ the_DT denormalized_VBN TPC-W_NN where_WRB no_DT p_NN
cal_JJ techniques_NNS to_TO each_DT individual_JJ service_NN ._.
Several_JJ recent_JJ academic_JJ and_CC industrial_JJ research_NN efforts_NNS have_VBP focused_VBN on_IN the_DT design_NN of_IN specialized_JJ data_NNS structures_NNS for_IN scalable_JJ and_CC highly_RB available_JJ services_NNS =_JJ -_: =[_NN 6_CD ,_, 10_CD ,_, 13_CD -RRB-_-RRB- -_: =_SYM -_: ._.
These_DT systems_NNS usually_RB provide_VBP a_DT simple_JJ key-based_JJ put\/get_NN interface_NN and_CC focus_NN on_IN scalability_NN and_CC availability_NN properties_NNS rather_RB than_IN rich_JJ functionality_NN or_CC transactional_JJ properties_NNS ._.
These_DT design_NN choic_JJ
requests_NNS can_MD be_VB distributed_VBN across_IN any_DT number_NN of_IN independent_JJ application_NN servers_NNS running_VBG identical_JJ code_NN ._.
Similarly_RB ,_, one_PRP can_MD reduce_VB the_DT network_NN bottleneck_NN between_IN the_DT application_NN and_CC database_NN servers_NNS =_JJ -_: =[_NN 33_CD -RRB-_-RRB- -_: =_SYM -_: ._.
The_DT main_JJ challenge_NN ,_, however_RB ,_, is_VBZ to_TO scale_VB access_NN to_TO application_NN data_NNS ._.
Besides_IN classical_JJ techniques_NNS such_JJ as_IN master-slave_JJ database_NN replication_NN ,_, new_JJ techniques_NNS exploit_VBP knowledge_NN of_IN the_DT application_NN data_NNS
tly_RB according_VBG to_TO its_PRP$ own_JJ load_NN ._.
Even_RB though_IN data_NNS denormalization_NN is_VBZ largely_RB applied_VBN to_TO improve_VB the_DT performance_NN of_IN individual_JJ databases_NNS ,_, few_JJ research_NN efforts_NNS have_VBP been_VBN made_VBN to_TO systematically_RB study_VB them_PRP =_JJ -_: =[_NN 27_CD ,_, 28_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Data_NN denormalization_NN often_RB creates_VBZ data_NNS redundancy_NN by_IN adding_VBG extra_JJ fields_NNS to_TO existing_VBG tables_NNS so_RB that_IN expensive_JJ join_VB queries_NNS can_MD be_VB rewritten_VBN into_IN simpler_JJR queries_NNS ._.
This_DT approach_NN implicitly_RB assumes_VBZ th_DT
is_VBZ that_IN ,_, although_IN denormalization_NN takes_VBZ only_RB data_NN access_NN patterns_NNS into_IN account_NN ,_, each_DT resulting_VBG data_NN service_NN has_VBZ clear_JJ semantics_NNS and_CC can_MD be_VB easily_RB named_VBN ._.
This_DT result_NN is_VBZ in_IN line_NN with_IN observations_NNS from_IN =_JJ -_: =[_NN 12_CD -RRB-_-RRB- -_: =_JJ -_: ,_, where_WRB examples_NNS of_IN real-world_JJ data_NNS services_NNS are_VBP discussed_VBN ._.
4.3.2_CD RUBBoS_NN RUBBoS_NN is_VBZ a_DT bulletin-board_JJ benchmark_NN modeled_VBN after_IN slashdot_NN ._.
org_NN -LRB-_-LRB- 26_CD -RRB-_-RRB- ._.
It_PRP consists_VBZ of_IN 8_CD tables_NNS requested_VBN by_IN 9_CD UDI_NN queries_NNS and_CC 3_CD
n_NN a_DT Web_NN application_NN along_IN such_PDT a_DT service-oriented_JJ architecture_NN with_IN simplified_VBN workload_NN ._.
Data_NN fragmentation_NN techniques_NNS have_VBP been_VBN commonly_RB used_VBN in_IN the_DT design_NN of_IN distributed_VBN relational_JJ database_NN systems_NNS =_JJ -_: =[_NN 15_CD ,_, 19_CD ,_, 20_CD ,_, 22_CD -RRB-_-RRB- -_: =_SYM -_: ._.
In_IN these_DT works_NNS ,_, tables_NNS are_VBP partitioned_VBN either_CC vertically_RB or_CC horizontally_RB into_IN smaller_JJR fragments_NNS ._.
Partitioning_NN schemes_NNS are_VBP determined_VBN according_VBG to_TO a_DT workload_NN analysis_NN in_IN order_NN to_TO optimize_VB access_NN time_NN
he_PRP maximum_JJ throughput_NN as_IN they_PRP require_VBP a_DT single_JJ master_NN server_NN to_TO execute_VB all_DT UDI_NNP queries_NNS ._.
The_DT throughput_NN of_IN the_DT master_NN server_NN then_RB determines_VBZ the_DT total_JJ system_NN 's_POS throughput_NN ._.
As_IN extensively_RB discussed_VBN in_IN =_JJ -_: =[_NN 31_CD -RRB-_-RRB- -_: =_JJ -_: ,_, a_DT number_NN of_IN techniques_NNS have_VBP been_VBN developed_VBN specifically_RB to_TO scale_VB Web_NN applications_NNS ._.
Most_JJS of_IN these_DT techniques_NNS exploit_VBP the_DT fact_NN that_IN Web_NN applications_NNS issue_VBP a_DT fixed_JJ number_NN of_IN query_JJ templates_NNS to_TO the_DT data_NNS
ads_NNS that_IN one_PRP should_MD expect_VB in_IN real_JJ deployments_NNS ,_, a_DT variety_NN of_IN techniques_NNS exist_VBP to_TO dictate_VB when_WRB and_CC how_WRB extra_JJ servers_NNS should_MD be_VB added_VBN or_CC removed_VBN from_IN each_DT individual_JJ data_NNS service_NN of_IN our_PRP$ implementations_NNS =_JJ -_: =[_NN 1_CD ,_, 7_CD ,_, 35_CD -RRB-_-RRB- -_: =_SYM -_: ._.
We_PRP compare_VBP three_CD implementations_NNS of_IN TPC-W_NN ._.
``_`` OTW_NNP ''_'' represents_VBZ the_DT unmodified_JJ original_JJ TPC-W_NN implementation_NN ._.
We_PRP then_RB compare_VBP its_PRP$ performance_NN to_TO ``_`` DTW_NNP ''_'' ,_, which_WDT represents_VBZ the_DT denormalized_VBN TPC-W_NN where_WRB no_DT p_NN
