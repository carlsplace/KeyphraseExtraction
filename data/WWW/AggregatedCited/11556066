Fast_JJ and_CC parallel_JJ webpage_NN layout_NN
The_DT web_NN browser_NN is_VBZ a_DT CPU-intensive_JJ program_NN ._.
Especially_RB on_IN mobile_JJ devices_NNS ,_, webpages_NNS load_VBP too_RB slowly_RB ,_, expending_VBG significant_JJ time_NN in_IN processing_VBG a_DT document_NN 's_POS appearance_NN ._.
Due_JJ to_TO power_NN constraints_NNS ,_, most_RBS hardware-driven_JJ speedups_NNS will_MD come_VB in_IN the_DT form_NN of_IN parallel_JJ architectures_NNS ._.
This_DT is_VBZ also_RB true_JJ of_IN mobile_JJ devices_NNS such_JJ as_IN phones_NNS and_CC e-books_NNS ._.
In_IN this_DT paper_NN ,_, we_PRP introduce_VBP new_JJ algorithms_NNS for_IN CSS_NN selector_NN matching_NN ,_, layout_NN solving_VBG ,_, and_CC font_NN rendering_NN ,_, which_WDT represent_VBP key_JJ components_NNS for_IN a_DT fast_JJ layout_NN engine_NN ._.
Evaluation_NN on_IN popular_JJ sites_NNS shows_VBZ speedups_NNS as_RB high_JJ as_IN 80x_NN ._.
We_PRP also_RB formulate_VBP the_DT layout_NN problem_NN with_IN attribute_NN grammars_NNS ,_, enabling_VBG us_PRP to_TO not_RB only_RB parallelize_VB our_PRP$ algorithm_NN but_CC prove_VBP that_IN it_PRP computes_VBZ in_IN O_NN -LRB-_-LRB- log_NN -RRB-_-RRB- time_NN and_CC without_IN reflow_NN ._.
hysical_JJ resource_NN control_NN also_RB stems_VBZ from_IN the_DT design_NN of_IN our_PRP$ parallel_JJ web_NN browser_NN -LRB-_-LRB- 8_CD -RRB-_-RRB- as_RB much_JJ of_IN the_DT time_NN in_IN browsers_NNS is_VBZ spent_VBN in_IN native_JJ libraries_NNS like_IN CSS_NN selector_NN matching_NN ._.
Tuned_VBN algorithm_NN approaches_VBZ =_JJ -_: =[_NN 12_CD -RRB-_-RRB- -_: =_JJ -_: ,_, reminiscent_JJ of_IN typical_JJ HPC_NN techniques_NNS like_IN tiling_NN ,_, give_VB magnitudes_NNS of_IN improvements_NNS ,_, so_RB having_VBG better_JJR control_NN would_MD yield_VB to_TO better_JJR speedups_NNS ._.
Finally_RB ,_, effective_JJ QOS_NNP management_NN is_VBZ not_RB possible_JJ without_IN
the_DT higher_JJR level_NN syntactic_JJ layer_NN of_IN JavaScript_NNP ,_, with_IN a_DT nod_NN to_TO applications_NNS of_IN their_PRP$ results_NNS to_TO type_NN systems_NNS ._.
Meyerovich_NNP and_CC Bod√≠k_NNP find_VBP that_IN at_IN least_JJS 40_CD %_NN of_IN Safari_NNP 's_POS time_NN is_VBZ spent_VBN in_IN page_NN layout_NN tasks_NNS =_JJ -_: =[_NN 16_CD -RRB-_-RRB- -_: =_SYM -_: ._.
They_PRP also_RB break_VBP down_RP the_DT length_NN of_IN time_NN for_IN several_JJ websites_NNS spent_VBN on_IN various_JJ tasks_NNS during_IN page_NN loads_NNS ,_, of_IN which_WDT JavaScript_NNP is_VBZ a_DT relatively_RB small_JJ component_NN -LRB-_-LRB- 15_CD %_NN -20_CD %_NN of_IN page_NN load_NN time_NN -RRB-_-RRB- ._.
Given_VBN these_DT re_NN
prevents_VBZ modules_NNS from_IN breaking_VBG abstractions_NNS and_CC makes_VBZ swapping_VBG implementations_NNS simple_JJ ._.
Parsers_NNS could_MD be_VB replaced_VBN with_IN parallel_NN -LRB-_-LRB- 8_CD -RRB-_-RRB- or_CC speculative_JJ 4_CD versions_NNS ;_: layout_NN might_MD be_VB replaced_VBN with_IN a_DT parallel_NN =_JJ -_: =[_NN 11_CD -RRB-_-RRB- -_: =_JJ -_: or_CC incrementalizing_VBG version_NN ,_, and_CC so_RB on_RB ._.
The_DT default_NN module_NN implementations_NNS are_VBP intended_VBN as_IN straightforward_JJ ,_, unoptimized_JJ reference_NN implementations_NNS ._.
This_DT permits_VBZ easy_JJ permodule_JJ evaluations_NNS of_IN alternate_NN
he_PRP computation_NN of_IN the_DT browser_NN ._.
The_DT network_NN improvement_NN is_VBZ discussed_VBN separately_RB and_CC is_VBZ not_RB clearly_RB included_VBN in_IN the_DT breakdown_NN ._.
Using_VBG call_NN stack_VBP sampling_NN for_IN performance_NN characterization_NN ,_, the_DT authors_NNS of_IN =_JJ -_: =[_NN 3_CD ,_, 8_CD -RRB-_-RRB- -_: =_SYM -_: threw_VBD out_RP the_DT network_NN time_NN in_IN their_PRP$ analysis_NN since_IN their_PRP$ profiling_NN method_NN can_MD not_RB capture_VB the_DT time_NN spent_VBD idling_VBG ._.
None_NN of_IN their_PRP$ methods_NNS capture_VBP the_DT cost_NN of_IN resource_NN loading_NN or_CC consider_VB the_DT concurrency_NN
