Using_VBG static_JJ analysis_NN for_IN Ajax_NNP intrusion_NN detection_NN
We_PRP present_VBP a_DT static_JJ control-flow_NN analysis_NN for_IN JavaScript_NNP programs_NNS running_VBG in_IN a_DT web_NN browser_NN ._.
Our_PRP$ analysis_NN tackles_VBZ numerous_JJ challenges_NNS posed_VBN by_IN modern_JJ web_NN applications_NNS including_VBG asynchronous_JJ communication_NN ,_, frameworks_NNS ,_, and_CC dynamic_JJ code_NN generation_NN ._.
We_PRP use_VBP our_PRP$ analysis_NN to_TO extract_VB a_DT model_NN of_IN expected_VBN client_NN behavior_NN as_IN seen_VBN from_IN the_DT server_NN ,_, and_CC build_VB an_DT intrusion-prevention_JJ proxy_NN for_IN the_DT server_NN :_: the_DT proxy_NN intercepts_VBZ client_NN requests_NNS and_CC disables_VBZ those_DT that_WDT do_VBP not_RB meet_VB the_DT expected_VBN behavior_NN ._.
We_PRP insert_VBP random_JJ asynchronous_JJ requests_NNS to_TO foil_NN mimicry_NN attacks_NNS ._.
Finally_RB ,_, we_PRP evaluate_VBP our_PRP$ technique_NN against_IN several_JJ real_JJ applications_NNS and_CC show_VBP that_IN it_PRP protects_VBZ against_IN an_DT attack_NN in_IN a_DT widely-used_JJ web_NN application_NN ._.
tic_JJ analysis_NN on_IN it_PRP ,_, rejecting_VBG everything_NN that_WDT does_VBZ not_RB match_VB a_DT static_JJ analysis_NN policy_NN -LRB-_-LRB- 3_CD ,_, 13_CD -RRB-_-RRB- ._.
Static_JJ analysis_NN techniques_NNS currently_RB struggle_VBP with_IN mechanisms_NNS for_IN intercepting_VBG dynamically_RB injected_VBN code_NN =_JJ -_: =[_NN 3_CD ,_, 14_CD -RRB-_-RRB- -_: =_JJ -_: ,_, which_WDT CONSCRIPT_NNP more_RBR cleanly_RB exposes_VBZ ,_, as_IN show_NN below_IN ._.
Recall_VB that_IN in_IN the_DT case_NN of_IN script_NN interception_NN advice_NN ,_, the_DT policy_NN is_VBZ designed_VBN to_TO return_VB the_DT code_NN that_IN the_DT JavaScript_NNP interpreter_NN will_MD proceed_VB to_TO
ack_NN traces_NNS to_TO the_DT server_NN ,_, and_CC the_DT server_NN could_MD check_VB the_DT traces_NNS for_IN any_DT properties_NNS it_PRP desires_NNS ._.
Or_CC the_DT server_NN could_MD build_VB a_DT model_NN of_IN proper_JJ client_NN behavior_NN and_CC flag_NN behavioral_JJ violations_NNS of_IN this_DT model_NN =_JJ -_: =[_NN 16_CD -RRB-_-RRB- -_: =_SYM -_: ._.
While_IN they_PRP are_VBP valuable_JJ ,_, these_DT techniques_NNS only_RB provide_VBP a_DT partial_JJ enforcement_NN of_IN integrity_NN ._.
Feasibility_NN of_IN our_PRP$ approach_NN ._.
In_IN general_JJ ,_, replicating_VBG the_DT clientside_NN component_NN running_VBG in_IN JavaScript_NNP on_IN the_DT
cially_RB true_JJ in_IN cases_NNS where_WRB JavaScript_NNP has_VBZ a_DT familiar_JJ syntax_NN but_CC an_DT unconventional_JJ semantics_NNS ._.
Duetoitspopularityandshortcomings_NNS ,_, companiesandresearchershavetried_VBN to_TO tame_JJ JavaScript_NN via_IN program_NN analyses_NNS =_JJ -_: =[_NN 4,9,10,13_CD -RRB-_-RRB- -_: =_JJ -_: ,_, sub-language_JJ -LRB-_-LRB- 5,7,17_CD -RRB-_-RRB- ,_, and_CC more_JJR ._.
These_DT works_NNS claim_VBP but_CC do_VBP not_RB demonstrate_VB soundness_NN ,_, partly_RB because_IN we_PRP lackatractableaccountofthelanguage_NN ._.
TheJavaScriptstandard_NN -LRB-_-LRB- 6_CD -RRB-_-RRB- iscapacious_JJ and_CC informal_JJ ,_, while_IN one_CD
Java_NNP applets_NNS ,_, rather_RB than_IN bugs_NNS in_IN Java-based_JJ web_NN applications_NNS ._.
Another_DT direction_NN of_IN research_NN deals_NNS with_IN protection_NN of_IN web_NN service_NN components_NNS against_IN malicious_JJ and\/or_CC compromised_VBN clients_NNS ._.
Guha_NNP et_FW al._FW =_SYM -_: =[_NN 15_CD -RRB-_-RRB- -_: =_SYM -_: employ_VB static_JJ analysis_NN on_IN JavaScript_NNP client_NN code_NN in_IN order_NN to_TO extract_VB an_DT expected_JJ client_NN behavior_NN as_IN seen_VBN by_IN the_DT server_NN ._.
The_DT server_NN is_VBZ then_RB protected_VBN by_IN a_DT proxy_NN that_WDT filters_VBZ possibly_RB malicious_JJ clients_NNS
ferent_JJ variants_NNS of_IN the_DT analysis_NN ._.
Jang_NNP and_CC Choe_NNP -LRB-_-LRB- Jang_NNP and_CC Choe_NNP 2009_CD -RRB-_-RRB- handles_VBZ only_RB a_DT simple_JJ subset_NN of_IN JavaScript_NNP ._.
Control_NN flow_NN analysis_NN for_IN dynamic_JJ languages_NNS has_VBZ been_VBN used_VBN for_IN Ajax_NNP intrusion_NN detection_NN -LRB-_-LRB- =_JJ -_: =_JJ Guha_NNP et_FW al._FW 2009_CD -_: =--RRB-_NN ._.
In_IN that_DT work_NN ,_, an_DT interprocedural_JJ CFG_NN for_IN a_DT JavaScript_NNP program_NN is_VBZ constructed_VBN usingk-CFA_NN and_CC then_RB transformed_VBN into_IN a_DT request_NN graph_NN to_TO build_VB an_DT intrusion-detection_JJ proxy_NN for_IN the_DT server_NN that_IN the_DT progr_NN
nt_NN resource_NN for_IN Rails_NNPS security_NN in_IN particular_JJ is_VBZ -LRB-_-LRB- 36_CD -RRB-_-RRB- ._.
Much_JJ research_NN on_IN web-application_NN security_NN has_VBZ focused_VBN on_IN settings_NNS where_WRB applications_NNS are_VBP untrusted_JJ ,_, and_CC users_NNS must_MD be_VB protected_VBN from_IN applications_NNS =_JJ -_: =[_NN 16_CD ,_, 38_CD ,_, 20_CD -RRB-_-RRB- -_: =_SYM -_: ._.
In_IN contrast_NN ,_, applications_NNS are_VBP not_RB considered_VBN inherently_RB malicious_JJ in_IN our_PRP$ setting_NN --_: we_PRP assume_VBP that_IN some_DT users_NNS may_MD be_VB malicious_JJ ,_, and_CC we_PRP care_VBP about_IN verifying_VBG that_IN applications_NNS and_CC other_JJ users_NNS are_VBP protect_VB
r_NN scripting_NN languages_NNS have_VBP come_VBN into_IN the_DT focus_NN of_IN research_NN on_IN static_JJ program_NN analysis_NN ,_, partly_RB because_IN of_IN their_PRP$ challenging_JJ dynamic_JJ nature_NN ._.
These_DT works_NNS range_VBP from_IN analysis_NN for_IN security_NN vulnerabilities_NNS =_JJ -_: =[_NN 9_CD ,_, 29_CD -RRB-_-RRB- -_: =_SYM -_: to_TO static_JJ type_NN inference_NN -LRB-_-LRB- 1,8,15,27_CD -RRB-_-RRB- ._.
We_PRP concentrate_VBP on_IN the_DT latter_JJ category_NN ,_, aiming_VBG to_TO develop_VB program_NN analyses_NNS that_WDT can_MD compensate_VB for_IN the_DT lack_NN of_IN static_JJ type_NN checking_NN in_IN these_DT languages_NNS ._.
The_DT interp_NN
d_NN from_IN applications_NNS ._.
Thus_RB ,_, client-side_JJ defenses_NNS have_VBP been_VBN studied_VBN -LRB-_-LRB- 36_CD ,_, 41_CD ,_, 55_CD -RRB-_-RRB- ,_, and_CC there_EX has_VBZ been_VBN important_JJ progress_NN on_IN browser_NN security_NN -LRB-_-LRB- 4_CD ,_, 10_CD ,_, 29_CD ,_, 52_CD ,_, 69_CD -RRB-_-RRB- ,_, and_CC on_IN JavaScript_NNP security_NN in_IN particular_JJ =_JJ -_: =[_NN 4_CD ,_, 30_CD ,_, 44_CD ,_, 45_CD ,_, 55_CD ,_, 69_CD -RRB-_-RRB- -_: =_SYM -_: ._.
In_IN contrast_NN ,_, applications_NNS are_VBP not_RB considered_VBN inherently_RB malicious_JJ in_IN our_PRP$ setting_NN --_: we_PRP assume_VBP that_IN some_DT users_NNS may_MD be_VB malicious_JJ ,_, and_CC we_PRP care_VBP about_IN verifying_VBG that_IN applications_NNS and_CC other_JJ users_NNS are_VBP protect_VB
esources_NNS would_MD make_VB these_DT attempts_NNS more_RBR reliable_JJ ._.
Recent_JJ proposals_NNS have_VBP suggested_VBN that_IN application-specific_JJ policies_NNS can_MD be_VB generated_VBN without_IN requiring_VBG the_DT author_NN to_TO write_VB code_NN ._.
For_IN example_NN ,_, a_DT static_JJ =_JJ -_: =[_NN 7_CD -RRB-_-RRB- -_: =_JJ -_: or_CC dynamic_JJ analysis_NN -LRB-_-LRB- 11_CD -RRB-_-RRB- can_MD be_VB used_VBN to_TO determine_VB acceptable_JJ interaction_NN patterns_NNS which_WDT a_DT developer_NN then_RB simply_RB audits_NN ._.
Given_VBN the_DT flexibility_NN of_IN JavaScript_NNP ,_, reliabile_JJ enforcement_NN in_IN these_DT intrusion_NN d_NN
de_IN of_IN the_DT outsourced_JJ computation,specificallyeitheranon-deterministicfinite-stateautomatonorapush-downautomatonthatmirrorstheflowof_NN control_NN in_IN the_DT executable_JJ ._.
A_DT more_RBR recent_JJ example_NN is_VBZ work_NN byGuhaetal_NN ._.
=_SYM -_: =[_NN 16_CD -RRB-_-RRB- -_: =_JJ -_: :_: throughstaticanalysisoftheclientportionofAjaxwebapplications_NN -LRB-_-LRB- HTMLandJavaScript_NN -RRB-_-RRB- ,_, their_PRP$ systemconstructsacontrol-flowgraphfortheclientthatdescribes_NNS the_DT sequencesof_NN URLs_NNS that_IN the_DT client-side_JJ program_NN ca_MD
idea_NN has_VBZ also_RB been_VBN used_VBN in_IN a_DT semi-automated_JJ approach_NN to_TO state-based_JJ testing_NN by_IN Marchetto_NNP et_FW al._FW -LRB-_-LRB- 14_CD ,_, 15_CD -RRB-_-RRB- ._.
Static_JJ analysis_NN for_IN JavaScript_NNP has_VBZ emerged_VBN as_IN a_DT complementary_JJ technique_NN for_IN detecting_VBG errors_NNS =_JJ -_: =[_NN 8_CD ,_, 9_CD ,_, 12_CD -RRB-_-RRB- -_: =_JJ -_: ,_, however_RB this_DT direction_NN of_IN work_NN is_VBZ still_RB at_IN an_DT early_JJ stage_NN ._.
The_DT dynamic_JJ nature_NN of_IN JavaScript_NNP -LRB-_-LRB- 20_CD -RRB-_-RRB- ,_, such_JJ as_IN runtime_NN code_NN generation_NN with_IN eval_NN and_CC runtime_NN HTML_NNP parsing_VBG with_IN innerHTML_NN ,_, makes_VBZ it_PRP difficul_JJ
isolating_VBG application-data_NN from_IN protocol_NN overhead_NN ,_, better_JJR control_NN in_IN respect_NN to_TO outgoing_JJ data_NNS can_MD be_VB guaranteed_VBN ._.
--_: Shriram_NNP Krishnamurthi_NNP presented_VBD work_NN on_IN control_NN flow_NN enforcement_NN in_IN Web_NN applications_NNS =_JJ -_: =[_NN 13_CD -RRB-_-RRB- -_: =_SYM -_: ._.
The_DT presented_VBN technique_NN is_VBZ built_VBN around_IN the_DT correlation_NN between_IN client-side_JJ events_NNS and_CC resulting_VBG HTTP_NN requests_NNS ._.
Through_IN an_DT analysis_NN of_IN the_DT behavior_NN of_IN the_DT application_NN this_DT correlation_NN can_MD be_VB establ_VBN
ies_NNS information_NN flow_NN analysis_NN to_TO avoid_VB information_NN leak_NN ._.
Wassermann_NNP and_CC Su_NNP -LRB-_-LRB- 20_CD -RRB-_-RRB- apply_VBP taint_NN analysis_NN and_CC string_NN analysis_NN to_TO perform_VB input_NN check_NN in_IN order_NN to_TO detect_VB the_DT XSS_NN vulnerabilities_NNS ._.
Guha_NNP et_FW al._FW =_SYM -_: =[_NN 10_CD -RRB-_-RRB- -_: =_SYM -_: use_VB static_JJ analysis_NN to_TO extract_VB a_DT model_NN of_IN expected_VBN user_NN behavior_NN to_TO detect_VB Ajax_NNP intrusion_NN ._.
Our_PRP$ analysis_NN is_VBZ also_RB static_JJ but_CC aims_VBZ at_IN a_DT different_JJ problem_NN ._.
Data_NN Race_NN Detection_NN and_CC Atomicity_NN Violation_NN ._.
Th_NN
lattice_NN must_MD have_VB finite_JJ height_NN -RRB-_-RRB- ,_, thus_RB abstraction_NN is_VBZ necessary_JJ ._.
A_DT simple_JJ approach_NN is_VBZ to_TO represent_VB all_DT HTML_NNP objects_NNS as_IN one_CD abstract_JJ object_NN ._.
This_DT is_VBZ essentially_RB what_WP is_VBZ done_VBN in_IN other_JJ program_NN analyses_NNS =_JJ -_: =[_NN 7,8_CD -RRB-_-RRB- -_: =_SYM -_: that_WDT perform_VBP a_DT less_RBR detailed_JJ analysis_NN than_IN what_WP we_PRP aim_VBP for_IN ._.
To_TO preserve_VB the_DT inheritance_NN relationships_NNS between_IN the_DT DOM_NNP objects_NNS ,_, we_PRP choose_VBP an_DT abstraction_NN where_WRB all_DT constructor_NN objects_NNS and_CC prototype_NN obj_NN
web_NN applications_NNS ,_, specifically_RB on_IN serverside_NN code_NN -LRB-_-LRB- 7_CD ,_, 33_CD ,_, 36_CD ,_, 39_CD --_: 41_CD ,_, 44_CD ,_, 66_CD ,_, 68_CD -RRB-_-RRB- but_CC also_RB more_RBR recently_RB on_IN JavaScriptA_NNP Systematic_NNP Analysis_NNP of_IN XSS_NNP Sanitization_NNP in_IN Web_NN Application_NN Frameworks_NNS 165_CD code_NN =_JJ -_: =[_NN 8_CD ,_, 27_CD ,_, 49_CD ,_, 50_CD -RRB-_-RRB- -_: =_SYM -_: ._.
These_DT works_NNS have_VBP underscored_VBN the_DT two_CD main_JJ causes_NNS of_IN XSS_NN vulnerabilities_NNS :_: identifying_VBG untrusted_JJ data_NNS at_IN output_NN and_CC errors_NNS in_IN sanitization_NN by_IN applications_NNS ._.
There_EX have_VBP been_VBN three_CD kinds_NNS of_IN defenses_NNS :_: pur_NN
thors_NNS acknowledge_VBP that_IN it_PRP is_VBZ unsound_JJ ,_, and_CC Chugh_NNP et_FW al._FW do_VBP not_RB provide_VB a_DT proof_NN of_IN soundness_NN for_IN their_PRP$ flow_NN analysis_NN ._.
Our_PRP$ type_NN system_NN and_CC analysis_NN are_VBP proven_JJ sound_NN ._.
Other_JJ static_JJ analyses_NNS for_IN JavaScript_NN =_JJ -_: =[_NN 16_CD ,_, 21_CD ,_, 22_CD -RRB-_-RRB- -_: =_SYM -_: are_VBP not_RB specifically_RB designed_VBN to_TO encode_VB and_CC check_VB security_NN ._.
Type_NN Systems_NNP Our_NNP type_NN checker_NN is_VBZ based_VBN on_IN that_DT of_IN Guha_NNP ,_, et_FW al._FW -LRB-_-LRB- 18_CD -RRB-_-RRB- ._.
Theirs_NNP has_VBZ a_DT restrictive_JJ type_NN system_NN for_IN objects_NNS that_IN we_PRP fully_RB replace_VB
ion_NN may_MD combine_VB code_NN from_IN multiple_JJ languages_NNS and_CC frameworks_NNS ,_, and_CC -LRB-_-LRB- 2_LS -RRB-_-RRB- client-side_JJ languages_NNS such_JJ as_IN JavaScript_NNP are_VBP notoriously_RB difficult_JJ to_TO analyze_VB statically_RB due_JJ to_TO the_DT presence_NN of_IN dynamic_JJ constructs_NNS =_JJ -_: =[_NN 3_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Prior_JJ work_NN has_VBZ shown_VBN that_IN dynamic_JJ invariants_NNS can_MD be_VB used_VBN in_IN general-purpose_JJ programs_NNS for_IN testing_NN and_CC error_NN detection_NN -LRB-_-LRB- 4_CD -RRB-_-RRB- ,_, -LRB-_-LRB- 5_CD -RRB-_-RRB- ,_, -LRB-_-LRB- 6_CD -RRB-_-RRB- ._.
However_RB ,_, there_EX has_VBZ been_VBN relatively_RB little_JJ work_NN on_IN deriving_VBG dynamic_NN
workflows_NNS ._.
Swaddler_NN -LRB-_-LRB- 6_CD -RRB-_-RRB- first_RB learns_VBZ internal_JJ states_NNS of_IN web_NN applications_NNS ,_, and_CC then_RB detects_VBZ abnormal_JJ state_NN violations_NNS at_IN critical_JJ points_NNS ._.
Targeting_NN the_DT detection_NN of_IN Ajax_NNP intrusion_NN attacks_NNS ,_, Guha_NNP et_FW al._FW =_SYM -_: =[_NN 11_CD -RRB-_-RRB- -_: =_JJ -_: leverage_NN static_JJ analysis_NN on_IN client-side_JJ JavaScript_NNP code_NN to_TO infer_VB expected_VBN server-side_JJ behavior_NN ._.
To_TO detect_VB multi-module_JJ vulnerabilities_NNS ,_, MiMoSA_NN -LRB-_-LRB- 1_CD -RRB-_-RRB- takes_VBZ into_IN account_NN the_DT interactions_NNS of_IN different_JJ web_NN
en_IN -LRB-_-LRB- 28_CD -RRB-_-RRB- address_VBP the_DT same_JJ problem_NN ,_, and_CC present_VB a_DT static_JJ analysis_NN algorithm_NN based_VBN on_IN symbolic_JJ evaluation_NN to_TO handle_VB dynamic_JJ features_NNS of_IN PHP_NNP ._.
While_IN the_DT above_JJ papers_NNS focus_VBP on_IN server-side_JJ code_NN ,_, Guha_NNP et_FW al._FW =_SYM -_: =[_NN 10_CD -RRB-_-RRB- -_: =_SYM -_: present_VB a_DT static_JJ control-flow_NN analysis_NN for_IN client-side_JJ JavaScript_NNP code_NN to_TO handle_VB dynamic_JJ code_NN generation_NN ._.
Maffeis_NNP and_CC Taly_NNP -LRB-_-LRB- 15_CD -RRB-_-RRB- study_NN methods_NNS for_IN filtering_VBG and_CC rewriting_VBG JavaScript_NNP code_NN to_TO address_VB si_IN
en_IN -LRB-_-LRB- 28_CD -RRB-_-RRB- address_VBP the_DT same_JJ problem_NN ,_, and_CC present_VB a_DT static_JJ analysis_NN algorithm_NN based_VBN on_IN symbolic_JJ evaluation_NN to_TO handle_VB dynamic_JJ features_NNS of_IN PHP_NNP ._.
While_IN the_DT above_JJ papers_NNS focus_VBP on_IN server-side_JJ code_NN ,_, Guha_NNP et_FW al._FW =_SYM -_: =[_NN 10_CD -RRB-_-RRB- -_: =_SYM -_: present_VB a_DT static_JJ control-flow_NN analysis_NN for_IN client-side_JJ JavaScript_NNP code_NN to_TO handle_VB dynamic_JJ code_NN generation_NN ._.
Maffeis_NNP and_CC Taly_NNP -LRB-_-LRB- 15_CD -RRB-_-RRB- study_NN methods_NNS for_IN filtering_VBG and_CC rewriting_VBG JavaScript_NNP code_NN to_TO address_VB si_IN
analysis_NN techniques_NNS for_IN JavaScript_NNP code_NN -LRB-_-LRB- 32_CD -RRB-_-RRB- ,_, particularly_RB to_TO statically_RB ensure_VB compliance_NN with_IN site-specific_JJ policies_NNS and_CC to_TO ensure_VB the_DT integrity_NN of_IN client-side_JJ JavaScript_NNP code_NN of_IN a_DT web_NN application_NN =_JJ -_: =[_NN 28_CD -RRB-_-RRB- -_: =_SYM -_: ._.
We_PRP plan_VBP to_TO explore_VB whether_IN Sabre_NNP can_MD leverage_NN similar_JJ static_JJ analysis_NN techniques_NNS to_TO reduce_VB the_DT runtime_NN overhead_NN of_IN information_NN flow_NN tracking_NN for_IN JSEs_NNS ._.
However_RB ,_, we_PRP expect_VBP that_IN performing_VBG such_JJ analysi_NNS
