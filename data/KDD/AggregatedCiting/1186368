GPLAG_NN :_: detection_NN of_IN software_NN plagiarism_NN by_IN program_NN dependence_NN graph_NN analysis_NN
Along_IN with_IN the_DT blossom_NN of_IN open_JJ source_NN projects_NNS comes_VBZ the_DT convenience_NN for_IN software_NN plagiarism_NN ._.
A_DT company_NN ,_, if_IN less_RBR self-disciplined_JJ ,_, may_MD be_VB tempted_VBN to_TO plagiarize_VB some_DT open_JJ source_NN projects_NNS for_IN its_PRP$ own_JJ products_NNS ._.
Although_IN current_JJ plagiarism_NN detection_NN tools_NNS appear_VBP sufficient_JJ for_IN academic_JJ use_NN ,_, they_PRP are_VBP nevertheless_RB short_JJ for_IN fighting_VBG against_IN serious_JJ plagiarists_NNS ._.
For_IN example_NN ,_, disguises_NNS like_IN statement_NN reordering_NN and_CC code_NN insertion_NN can_MD effectively_RB confuse_VB these_DT tools_NNS ._.
In_IN this_DT paper_NN ,_, we_PRP develop_VBP a_DT new_JJ plagiarism_NN detection_NN tool_NN ,_, called_VBN GPLAG_NNP ,_, which_WDT detects_VBZ plagiarism_NN by_IN mining_NN program_NN dependence_NN graphs_NNS -LRB-_-LRB- PDGs_NNS -RRB-_-RRB- ._.
A_DT PDG_NN is_VBZ a_DT graphic_JJ representation_NN of_IN the_DT data_NNS and_CC control_NN dependencies_NNS within_IN a_DT procedure_NN ._.
Because_IN PDGs_NNS are_VBP nearly_RB invariant_JJ during_IN plagiarism_NN ,_, GPLAG_NN is_VBZ more_RBR effective_JJ than_IN state-of-the-art_JJ tools_NNS for_IN plagiarism_NN detection_NN ._.
In_IN order_NN to_TO make_VB GPLAG_NN scalable_JJ to_TO large_JJ programs_NNS ,_, a_DT statistical_JJ lossy_NN filter_NN is_VBZ proposed_VBN to_TO prune_VB the_DT plagiarism_NN search_NN space_NN ._.
Experiment_NN study_NN shows_VBZ that_IN GPLAG_NN is_VBZ both_CC effective_JJ and_CC efficient_JJ :_: It_PRP detects_VBZ plagiarism_NN that_WDT easily_RB slips_VBZ over_IN existing_VBG tools_NNS ,_, and_CC it_PRP usually_RB takes_VBZ a_DT few_JJ seconds_NNS to_TO find_VB -LRB-_-LRB- simulated_JJ -RRB-_-RRB- plagiarism_NN in_IN programs_NNS having_VBG thousands_NNS of_IN lines_NNS of_IN code_NN ._.
e_LS algorithms_NNS are_VBP reasonably_RB fast_RB on_IN average_NN and_CC become_VB computationally_RB intractable_JJ only_RB in_IN a_DT few_JJ cases_NNS -LRB-_-LRB- 6_CD -RRB-_-RRB- -LRB-_-LRB- 7_CD -RRB-_-RRB- ._.
For_IN example_NN ,_, algorithms_NNS based_VBN on_IN backtracking_VBG and_CC look-ahead_JJ ,_, e.g._FW ,_, Ullmann_NNP 's_POS algorithm_NN =_JJ -_: =[_NN 20_CD -RRB-_-RRB- -_: =_JJ -_: and_CC VF_NNP -LRB-_-LRB- 8_CD -RRB-_-RRB- are_VBP comfortable_JJ with_IN graphs_NNS of_IN hundreds_NNS or_CC thousands_NNS of_IN vertices_NNS ._.
Besides_IN the_DT general_JJ tractability_NN ,_, the_DT peculiarity_NN of_IN PDGs_NNS and_CC the_DT needs_NNS for_IN plagiarism_NN detection_NN also_RB lower_JJR down_IN the_DT compu_NN
y_NN parameter_NN α_NN is_VBZ application_NN independent_JJ ,_, and_CC can_MD be_VB set_VBN in_IN a_DT meaningful_JJ way_NN :_: it_PRP balances_VBZ the_DT pruning_NN power_NN and_CC the_DT false_JJ negative_JJ rate_NN ._.
Secondly_RB ,_, people_NNS may_MD wonder_VB why_WRB the_DT popular_JJ Pearson_NNP 's_POS χ_NN 2_CD test_NN =_JJ -_: =[_NN 13_CD -RRB-_-RRB- -_: =_JJ -_: is_VBZ not_RB used_VBN ,_, given_VBN hypothesis_NN testing-based_JJ pruning_NN is_VBZ better_JJR than_IN distance-based_JJ ones_NNS ._.
The_DT reason_NN is_VBZ that_IN Pearson_NNP 's_POS χ_NN 2_CD test_NN is_VBZ appropriate_JJ only_RB when_WRB no_DT frequencies_NNS in_IN the_DT vertex_NN histogram_NN is_VBZ near_IN z_SYM
syntax_NN tree_NN -LRB-_-LRB- AST_NNP -RRB-_-RRB- with_IN variable_JJ names_NNS and_CC literal_JJ values_NNS discarded_VBN ._.
Then_RB duplicate_VB subtrees_NNS are_VBP searched_VBN between_IN two_CD programs_NNS ,_, and_CC code_NN corresponding_VBG to_TO duplicate_VB subtrees_NNS are_VBP labeled_VBN as_IN plagiarism_NN =_JJ -_: =[_NN 2_CD ,_, 11_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Because_IN this_DT approach_NN disregards_VBZ the_DT information_NN about_IN variables_NNS -LRB-_-LRB- in_IN order_NN to_TO make_VB codes_NNS differing_VBG on_IN variables_NNS names_NNS appear_VBP the_DT same_JJ on_IN ASTs_NNS -RRB-_-RRB- ,_, it_PRP ignores_VBZ data_NN flows_NNS ,_, and_CC is_VBZ in_IN consequence_NN fragile_JJ t_NN
ogram_NN symbols_NNS ,_, like_IN identifiers_NNS and_CC keywords_NNS ,_, are_VBP first_RB tokenized_VBN ._.
A_DT program_NN is_VBZ then_RB represented_VBN as_IN a_DT token_JJ sequence_NN ,_, and_CC duplicate_VB token_JJ subsequences_NNS are_VBP searched_VBN for_IN plagiarism_NN between_IN two_CD programs_NNS =_JJ -_: =[_NN 9,17,18_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Because_IN variables_NNS of_IN the_DT same_JJ type_NN are_VBP mapped_VBN into_IN the_DT same_JJ token_JJ ,_, this_DT approach_NN is_VBZ robust_JJ to_TO idenFigure_NN 2_CD :_: Original_NNP and_CC Plagiarized_NNP Code_NNP 01_CD static_JJ void_NN 02_CD fill_content_NN -LRB-_-LRB- int_NN num_NN ,_, struct_NN line_NN \*_NN fill_NN -RRB-_-RRB- 0_CD
i_LS =_JJ 1_CD θi_FW mi_FW log_NN mi_FW mθi_FW ∼_FW χ_FW 2_CD k_NN −_NN 1_CD ,_, -LRB-_-LRB- 5_CD -RRB-_-RRB- where_WRB T_NN -LRB-_-LRB- X_NN -RRB-_-RRB- is_VBZ the_DT test_NN statistic_NN for_IN G-Test_NN ,_, and_CC asymptotically_RB conforms_VBZ to_TO χ_NN 2_CD k_NN −_NN 1_CD under_IN H0_NN ._.
A_DT rigid_JJ derivation_NN for_IN the_DT asymptotical_JJ approximation_NN can_MD be_VB found_VBN in_IN =_JJ -_: =[_NN 19_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Given_VBN a_DT significance_NN level_NN α_NN ,_, we_PRP then_RB check_VB whether_IN T_NN -LRB-_-LRB- X_NN -RRB-_-RRB- -RRB-_-RRB- χ_NN 2_CD k_NN −_NN 1_CD -LRB-_-LRB- α_NN -RRB-_-RRB- ,_, where_WRB χ_NN 2_CD k_NN −_NN 1_CD -LRB-_-LRB- α_NN -RRB-_-RRB- is_VBZ the_DT upper_JJ α_FW ∗_FW 100_CD percentile_NN of_IN the_DT χ_NN 2_CD k_NN −_NN 1_CD distribution_NN ._.
If_IN it_PRP is_VBZ ,_, H0_NN is_VBZ rejected_VBN ,_, which_WDT means_VBZ that_IN g_NN ′_NN is_VBZ
ogram_NN symbols_NNS ,_, like_IN identifiers_NNS and_CC keywords_NNS ,_, are_VBP first_RB tokenized_VBN ._.
A_DT program_NN is_VBZ then_RB represented_VBN as_IN a_DT token_JJ sequence_NN ,_, and_CC duplicate_VB token_JJ subsequences_NNS are_VBP searched_VBN for_IN plagiarism_NN between_IN two_CD programs_NNS =_JJ -_: =[_NN 9,17,18_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Because_IN variables_NNS of_IN the_DT same_JJ type_NN are_VBP mapped_VBN into_IN the_DT same_JJ token_JJ ,_, this_DT approach_NN is_VBZ robust_JJ to_TO idenFigure_NN 2_CD :_: Original_NNP and_CC Plagiarized_NNP Code_NNP 01_CD static_JJ void_NN 02_CD fill_content_NN -LRB-_-LRB- int_NN num_NN ,_, struct_NN line_NN \*_NN fill_NN -RRB-_-RRB- 0_CD
isomorphism_NN is_VBZ NP-complete_JJ in_IN general_JJ -LRB-_-LRB- 5_CD -RRB-_-RRB- ,_, research_NN in_IN the_DT past_JJ three_CD decades_NNS has_VBZ shown_VBN that_IN some_DT algorithms_NNS are_VBP reasonably_RB fast_RB on_IN average_NN and_CC become_VB computationally_RB intractable_JJ only_RB in_IN a_DT few_JJ cases_NNS =_JJ -_: =[_NN 6_CD -RRB-_-RRB- -_: =_JJ -_: -LRB-_-LRB- 7_CD -RRB-_-RRB- ._.
For_IN example_NN ,_, algorithms_NNS based_VBN on_IN backtracking_VBG and_CC look-ahead_JJ ,_, e.g._FW ,_, Ullmann_NNP 's_POS algorithm_NN -LRB-_-LRB- 20_CD -RRB-_-RRB- and_CC VF_NNP -LRB-_-LRB- 8_CD -RRB-_-RRB- are_VBP comfortable_JJ with_IN graphs_NNS of_IN hundreds_NNS or_CC thousands_NNS of_IN vertices_NNS ._.
Besides_IN the_DT general_JJ trac_NN
following_VBG three_CD categories_NNS ._.
1_CD ._.
String-based_JJ :_: Each_DT statement_NN is_VBZ treated_VBN as_IN a_DT string_NN ,_, and_CC a_DT program_NN is_VBZ represented_VBN as_IN a_DT sequence_NN of_IN strings_NNS ._.
Two_CD programs_NNS are_VBP compared_VBN to_TO find_VB sequences_NNS of_IN same_JJ strings_NNS =_JJ -_: =[_NN 1_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Because_IN blanks_NNS and_CC comments_NNS are_VBP discarded_VBN ,_, this_DT kind_NN of_IN algorithms_NNS are_VBP robust_JJ to_TO format_NN alteration_NN ,_, but_CC fragile_JJ to_TO identifier_NN renaming_NN ._.
2_CD ._.
AST-based_JJ :_: A_DT program_NN is_VBZ first_RB parsed_VBN into_IN an_DT abstract_JJ synta_NN
morphism_NN is_VBZ NP-complete_JJ in_IN general_JJ -LRB-_-LRB- 5_CD -RRB-_-RRB- ,_, research_NN in_IN the_DT past_JJ three_CD decades_NNS has_VBZ shown_VBN that_IN some_DT algorithms_NNS are_VBP reasonably_RB fast_RB on_IN average_NN and_CC become_VB computationally_RB intractable_JJ only_RB in_IN a_DT few_JJ cases_NNS -LRB-_-LRB- 6_CD -RRB-_-RRB- =_JJ -_: =[_NN 7_CD -RRB-_-RRB- -_: =_SYM -_: ._.
For_IN example_NN ,_, algorithms_NNS based_VBN on_IN backtracking_VBG and_CC look-ahead_JJ ,_, e.g._FW ,_, Ullmann_NNP 's_POS algorithm_NN -LRB-_-LRB- 20_CD -RRB-_-RRB- and_CC VF_NNP -LRB-_-LRB- 8_CD -RRB-_-RRB- are_VBP comfortable_JJ with_IN graphs_NNS of_IN hundreds_NNS or_CC thousands_NNS of_IN vertices_NNS ._.
Besides_IN the_DT general_JJ tractabi_NN
seconds_NNS even_RB when_WRB subject_JJ programs_NNS are_VBP of_IN thousands_NNS of_IN lines_NNS of_IN code_NN ._.
There_EX are_VBP studies_NNS on_IN detection_NN of_IN other_JJ kinds_NNS of_IN plagiarism_NN ,_, such_JJ as_IN plagiarized_VBN research_NN papers_NNS ,_, homework_NN answers_NNS ,_, and_CC Web_NN pages_NNS =_JJ -_: =[_NN 3_CD -RRB-_-RRB- -_: =_SYM -_: ._.
The_DT nature_NN of_IN such_JJ plagiarism_NN is_VBZ rather_RB different_JJ from_IN that_DT of_IN software_NN plagiarism_NN which_WDT often_RB requires_VBZ more_RBR sophisticated_JJ analysis_NN ._.
From_IN the_DT data_NN analysis_NN point_NN of_IN view_NN ,_, GPlag_NN is_VBZ related_JJ to_TO graph_NN m_NN
ty_IN Because_IN our_PRP$ PDG-based_JJ plagiarism_NN detection_NN involves_VBZ subgraph_JJ isomorphism_NN testing_NN ,_, we_PRP discuss_VBP the_DT computation_NN feasibility_NN in_IN this_DT subsection_NN ._.
Although_IN subgraph_JJ isomorphism_NN is_VBZ NP-complete_JJ in_IN general_JJ =_JJ -_: =[_NN 5_CD -RRB-_-RRB- -_: =_JJ -_: ,_, research_NN in_IN the_DT past_JJ three_CD decades_NNS has_VBZ shown_VBN that_IN some_DT algorithms_NNS are_VBP reasonably_RB fast_RB on_IN average_NN and_CC become_VB computationally_RB intractable_JJ only_RB in_IN a_DT few_JJ cases_NNS -LRB-_-LRB- 6_CD -RRB-_-RRB- -LRB-_-LRB- 7_CD -RRB-_-RRB- ._.
For_IN example_NN ,_, algorithms_NNS based_VBN on_IN
syntax_NN tree_NN -LRB-_-LRB- AST_NNP -RRB-_-RRB- with_IN variable_JJ names_NNS and_CC literal_JJ values_NNS discarded_VBN ._.
Then_RB duplicate_VB subtrees_NNS are_VBP searched_VBN between_IN two_CD programs_NNS ,_, and_CC code_NN corresponding_VBG to_TO duplicate_VB subtrees_NNS are_VBP labeled_VBN as_IN plagiarism_NN =_JJ -_: =[_NN 2_CD ,_, 11_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Because_IN this_DT approach_NN disregards_VBZ the_DT information_NN about_IN variables_NNS -LRB-_-LRB- in_IN order_NN to_TO make_VB codes_NNS differing_VBG on_IN variables_NNS names_NNS appear_VBP the_DT same_JJ on_IN ASTs_NNS -RRB-_-RRB- ,_, it_PRP ignores_VBZ data_NN flows_NNS ,_, and_CC is_VBZ in_IN consequence_NN fragile_JJ t_NN
ogram_NN symbols_NNS ,_, like_IN identifiers_NNS and_CC keywords_NNS ,_, are_VBP first_RB tokenized_VBN ._.
A_DT program_NN is_VBZ then_RB represented_VBN as_IN a_DT token_JJ sequence_NN ,_, and_CC duplicate_VB token_JJ subsequences_NNS are_VBP searched_VBN for_IN plagiarism_NN between_IN two_CD programs_NNS =_JJ -_: =[_NN 9,17,18_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Because_IN variables_NNS of_IN the_DT same_JJ type_NN are_VBP mapped_VBN into_IN the_DT same_JJ token_JJ ,_, this_DT approach_NN is_VBZ robust_JJ to_TO idenFigure_NN 2_CD :_: Original_NNP and_CC Plagiarized_NNP Code_NNP 01_CD static_JJ void_NN 02_CD fill_content_NN -LRB-_-LRB- int_NN num_NN ,_, struct_NN line_NN \*_NN fill_NN -RRB-_-RRB- 0_CD
ally_NN and_CC experimentally_RB ._.
The_DT program_NN dependence_NN graph_NN ,_, first_RB proposed_VBN by_IN Ferrante_NNP et_FW al._FW -LRB-_-LRB- 4_CD -RRB-_-RRB- ,_, has_VBZ previously_RB been_VBN used_VBN in_IN the_DT identification_NN of_IN duplicated_JJ code_NN for_IN the_DT purpose_NN of_IN software_NN maintenance_NN =_JJ -_: =[_NN 10_CD ,_, 12_CD -RRB-_-RRB- -_: =_SYM -_: ._.
In_IN this_DT study_NN ,_, we_PRP propose_VBP GPlag_NN as_IN a_DT PDG-based_JJ algorithm_NN for_IN plagiarism_NN detection_NN ._.
Moreover_RB ,_, for_IN both_CC effectiveness_NN and_CC efficiency_NN ,_, a_DT statistical_JJ lossy_NN filter_NN is_VBZ developed_VBN ,_, which_WDT has_VBZ not_RB been_VBN seen_VBN i_LS
ally_NN and_CC experimentally_RB ._.
The_DT program_NN dependence_NN graph_NN ,_, first_RB proposed_VBN by_IN Ferrante_NNP et_FW al._FW -LRB-_-LRB- 4_CD -RRB-_-RRB- ,_, has_VBZ previously_RB been_VBN used_VBN in_IN the_DT identification_NN of_IN duplicated_JJ code_NN for_IN the_DT purpose_NN of_IN software_NN maintenance_NN =_JJ -_: =[_NN 10_CD ,_, 12_CD -RRB-_-RRB- -_: =_SYM -_: ._.
In_IN this_DT study_NN ,_, we_PRP propose_VBP GPlag_NN as_IN a_DT PDG-based_JJ algorithm_NN for_IN plagiarism_NN detection_NN ._.
Moreover_RB ,_, for_IN both_CC effectiveness_NN and_CC efficiency_NN ,_, a_DT statistical_JJ lossy_NN filter_NN is_VBZ developed_VBN ,_, which_WDT has_VBZ not_RB been_VBN seen_VBN i_LS
are_VBP reasonably_RB fast_RB on_IN average_NN and_CC become_VB computationally_RB intractable_JJ only_RB in_IN a_DT few_JJ cases_NNS -LRB-_-LRB- 6_CD -RRB-_-RRB- -LRB-_-LRB- 7_CD -RRB-_-RRB- ._.
For_IN example_NN ,_, algorithms_NNS based_VBN on_IN backtracking_VBG and_CC look-ahead_JJ ,_, e.g._FW ,_, Ullmann_NNP 's_POS algorithm_NN -LRB-_-LRB- 20_CD -RRB-_-RRB- and_CC VF_NNP =_SYM -_: =[_NN 8_CD -RRB-_-RRB- -_: =_SYM -_: are_VBP comfortable_JJ with_IN graphs_NNS of_IN hundreds_NNS or_CC thousands_NNS of_IN vertices_NNS ._.
Besides_IN the_DT general_JJ tractability_NN ,_, the_DT peculiarity_NN of_IN PDGs_NNS and_CC the_DT needs_NNS for_IN plagiarism_NN detection_NN also_RB lower_JJR down_IN the_DT computation_NN work_NN
tware_JJ revision_NN history_NN ,_, which_WDT uncovers_VBZ programming_NN rules_NNS that_IN developers_NNS are_VBP expected_VBN to_TO conform_VB to_TO -LRB-_-LRB- 16_CD -RRB-_-RRB- ._.
Liu_NNP et_FW al._FW show_VBP that_IN mining_NN program_NN control_NN flow_NN graphs_NNS can_MD help_VB developers_NNS find_VB logic_NN errors_NNS =_JJ -_: =[_NN 14,15_CD -RRB-_-RRB- -_: =_SYM -_: ._.
These_DT cases_NNS well_RB exemplify_VBP the_DT promise_NN and_CC usefulness_NN of_IN data_NNS mining_NN in_IN software_NN engineering_NN ._.
This_DT study_NN provides_VBZ yet_RB another_DT such_JJ example_NN ._.
7.2_CD Implications_NNS to_TO Software_NNP Industry_NNP Software_NNP plagiarism_NN
cations_NNS of_IN the_DT GPlag_NN approach_NN to_TO software_NN industry_NN ._.
Finally_RB ,_, Section_NN 8_CD concludes_VBZ this_DT study_NN ._.
2_CD ._.
BACKGROUND_NN A_NN program_NN dependence_NN graph_NN -LRB-_-LRB- PDG_NN -RRB-_-RRB- is_VBZ a_DT graph_NN representation_NN of_IN the_DT source_NN code_NN of_IN a_DT procedure_NN =_JJ -_: =[_NN 4_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Basic_JJ statements_NNS ,_, like_IN variable_JJ declarations_NNS ,_, assignments_NNS ,_, and_CC procedure_NN calls_NNS ,_, are_VBP represented_VBN by_IN program_NN vertices_NNS in_IN PDGs_NNS ._.
Each_DT vertex_NN has_VBZ one_CD and_CC only_RB one_CD type_NN ,_, and_CC several_JJ important_JJ types_NNS are_VBP li_FW
eful_JJ results_NNS for_IN software_NN engineers_NNS ._.
Livshits_NNP et_FW al._FW apply_VB frequent_JJ itemset_NN mining_NN algorithms_NNS to_TO software_NN revision_NN history_NN ,_, which_WDT uncovers_VBZ programming_NN rules_NNS that_IN developers_NNS are_VBP expected_VBN to_TO conform_VB to_TO =_JJ -_: =[_NN 16_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Liu_NNP et_FW al._FW show_VBP that_IN mining_NN program_NN control_NN flow_NN graphs_NNS can_MD help_VB developers_NNS find_VB logic_NN errors_NNS -LRB-_-LRB- 14,15_CD -RRB-_-RRB- ._.
These_DT cases_NNS well_RB exemplify_VBP the_DT promise_NN and_CC usefulness_NN of_IN data_NNS mining_NN in_IN software_NN engineering_NN ._.
T_NN
tware_JJ revision_NN history_NN ,_, which_WDT uncovers_VBZ programming_NN rules_NNS that_IN developers_NNS are_VBP expected_VBN to_TO conform_VB to_TO -LRB-_-LRB- 16_CD -RRB-_-RRB- ._.
Liu_NNP et_FW al._FW show_VBP that_IN mining_NN program_NN control_NN flow_NN graphs_NNS can_MD help_VB developers_NNS find_VB logic_NN errors_NNS =_JJ -_: =[_NN 14,15_CD -RRB-_-RRB- -_: =_SYM -_: ._.
These_DT cases_NNS well_RB exemplify_VBP the_DT promise_NN and_CC usefulness_NN of_IN data_NNS mining_NN in_IN software_NN engineering_NN ._.
This_DT study_NN provides_VBZ yet_RB another_DT such_JJ example_NN ._.
7.2_CD Implications_NNS to_TO Software_NNP Industry_NNP Software_NNP plagiarism_NN
tection_NN because_IN they_PRP search_VBP for_IN potential_JJ candidates_NNS almost_RB everywhere_RB in_IN a_DT ``_`` candidate-generation-andcheck_JJ ''_'' approach_NN ._.
As_IN an_DT example_NN ,_, given_VBN two_CD identical_JJ PDGs_NNS with_IN 30_CD vertices_NNS and_CC 43_CD edges_NNS ,_, CloseGraph_NN =_JJ -_: =[_NN 21_CD -RRB-_-RRB- -_: =_SYM -_: fails_VBZ to_TO terminate_VB in_IN two_CD days_NNS ._.
This_DT paper_NN proposes_VBZ an_DT isomorphismbased_JJ approach_NN ,_, which_WDT proves_VBZ both_CC effective_JJ and_CC efficient_JJ ._.
Finally_RB ,_, this_DT study_NN falls_VBZ into_IN an_DT emerging_VBG application_NN domain_NN in_IN data_NNS min_NN
