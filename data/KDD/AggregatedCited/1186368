GPLAG_NN :_: detection_NN of_IN software_NN plagiarism_NN by_IN program_NN dependence_NN graph_NN analysis_NN
Along_IN with_IN the_DT blossom_NN of_IN open_JJ source_NN projects_NNS comes_VBZ the_DT convenience_NN for_IN software_NN plagiarism_NN ._.
A_DT company_NN ,_, if_IN less_RBR self-disciplined_JJ ,_, may_MD be_VB tempted_VBN to_TO plagiarize_VB some_DT open_JJ source_NN projects_NNS for_IN its_PRP$ own_JJ products_NNS ._.
Although_IN current_JJ plagiarism_NN detection_NN tools_NNS appear_VBP sufficient_JJ for_IN academic_JJ use_NN ,_, they_PRP are_VBP nevertheless_RB short_JJ for_IN fighting_VBG against_IN serious_JJ plagiarists_NNS ._.
For_IN example_NN ,_, disguises_NNS like_IN statement_NN reordering_NN and_CC code_NN insertion_NN can_MD effectively_RB confuse_VB these_DT tools_NNS ._.
In_IN this_DT paper_NN ,_, we_PRP develop_VBP a_DT new_JJ plagiarism_NN detection_NN tool_NN ,_, called_VBN GPLAG_NNP ,_, which_WDT detects_VBZ plagiarism_NN by_IN mining_NN program_NN dependence_NN graphs_NNS -LRB-_-LRB- PDGs_NNS -RRB-_-RRB- ._.
A_DT PDG_NN is_VBZ a_DT graphic_JJ representation_NN of_IN the_DT data_NNS and_CC control_NN dependencies_NNS within_IN a_DT procedure_NN ._.
Because_IN PDGs_NNS are_VBP nearly_RB invariant_JJ during_IN plagiarism_NN ,_, GPLAG_NN is_VBZ more_RBR effective_JJ than_IN state-of-the-art_JJ tools_NNS for_IN plagiarism_NN detection_NN ._.
In_IN order_NN to_TO make_VB GPLAG_NN scalable_JJ to_TO large_JJ programs_NNS ,_, a_DT statistical_JJ lossy_NN filter_NN is_VBZ proposed_VBN to_TO prune_VB the_DT plagiarism_NN search_NN space_NN ._.
Experiment_NN study_NN shows_VBZ that_IN GPLAG_NN is_VBZ both_CC effective_JJ and_CC efficient_JJ :_: It_PRP detects_VBZ plagiarism_NN that_WDT easily_RB slips_VBZ over_IN existing_VBG tools_NNS ,_, and_CC it_PRP usually_RB takes_VBZ a_DT few_JJ seconds_NNS to_TO find_VB -LRB-_-LRB- simulated_JJ -RRB-_-RRB- plagiarism_NN in_IN programs_NNS having_VBG thousands_NNS of_IN lines_NNS of_IN code_NN ._.
G_NN has_VBZ a_DT structure_NN similar_JJ to_TO that_DT of_IN Gp_NN ,_, although_IN not_RB necessarily_RB identical_JJ ._.
The_DT need_NN for_IN this_DT is_VBZ evident_JJ in_IN ,_, e.g._FW ,_, Web_NN anomaly_NN detection_NN -LRB-_-LRB- 23_CD -RRB-_-RRB- ,_, search_NN result_NN classification_NN -LRB-_-LRB- 25_CD -RRB-_-RRB- ,_, plagiarism_NN detection_NN =_JJ -_: =[_NN 20_CD -RRB-_-RRB- -_: =_JJ -_: and_CC spam_NN detection_NN -LRB-_-LRB- 3_CD -RRB-_-RRB- ._.
In_IN these_DT contexts_NNS ,_, identical_JJ label_NN matching_NN is_VBZ often_RB an_DT overkill_NN ,_, and_CC edge-to-edge_JJ mappings_NNS only_RB allow_VBP strikingly_RB similar_JJ graphs_NNS to_TO be_VB matched_VBN ._.
Example_NN 1.1_CD :_: Consider_VB two_CD onlin_NN
nized_VBN ,_, and_CC then_RB the_DT resulting_VBG token_JJ strings_NNS are_VBP compared_VBN using_VBG various_JJ string_NN comparison_NN algorithms_NNS -LRB-_-LRB- e.g._FW ,_, Running-Karp-Rabin_NNP Greedy-String-Tiling_NNP in_IN -LRB-_-LRB- 21_CD -RRB-_-RRB- -RRB-_-RRB- ._.
Also_RB the_DT program_NN dependency_NN graphs_NNS used_VBN in_IN =_JJ -_: =[_NN 15_CD -RRB-_-RRB- -_: =_SYM -_: can_MD be_VB considered_VBN structure-based_JJ ._.
2.2_CD Tools_NNS The_DT criteria_NNS for_IN selecting_NN tools_NNS for_IN our_PRP$ comparison_NN largely_RB depend_VBP on_IN the_DT answers_NNS to_TO the_DT following_JJ questions_NNS :_: Can_MD the_DT tool_NN deal_NN with_IN Java_NNP programs_NNS ?_.
Is_VBZ it_PRP
l_NN and_CC data_NN dependency_NN among_IN statements_NNS ._.
The_DT PDG_NN are_VBP used_VBN in_IN the_DT field_NN of_IN Software_NNP Engineering_NNP ,_, in_IN areas_NNS such_JJ as_IN Program_NN Visualization_NN -LRB-_-LRB- 27_CD -RRB-_-RRB- ,_, duplicated_JJ code_NN detection_NN -LRB-_-LRB- 28_CD -RRB-_-RRB- -LRB-_-LRB- 29_CD -RRB-_-RRB- and_CC plagiarism_NN detection_NN =_JJ -_: =[_NN 30_CD -RRB-_-RRB- -_: =_SYM -_: ._.
The_DT PDG-based_JJ model_NN prove_VBP effective_JJ in_IN detecting_VBG duplicated_JJ code_NN and_CC are_VBP robust_JJ against_IN experienced_JJ plagiarist_NN disguises_NNS such_JJ as_IN statement_NN reordering_NN an_DT control_NN flow_NN alteration_NN ._.
However_RB ,_, the_DT duplica_NN
based_VBN approach_NN -LRB-_-LRB- 2_CD -RRB-_-RRB- ,_, -LRB-_-LRB- 4_CD -RRB-_-RRB- ,_, •_JJ Token-based_JJ approach_NN -LRB-_-LRB- 7_CD -RRB-_-RRB- ,_, -LRB-_-LRB- 8_CD -RRB-_-RRB- ,_, 350World_JJ Academy_NNP of_IN Science_NNP ,_, Engineering_NNP and_CC Technology_NNP 60_CD 2009_CD •_NN AST-based_JJ approach_NN -LRB-_-LRB- 3_CD -RRB-_-RRB- ,_, -LRB-_-LRB- 9_CD -RRB-_-RRB- ,_, -LRB-_-LRB- 10_CD -RRB-_-RRB- ,_, and_CC •_CD Dependency-based_JJ approach_NN -LRB-_-LRB- 11_CD -RRB-_-RRB- ,_, -LRB-_-LRB- 12_CD -RRB-_-RRB- ,_, =_JJ -_: =[_NN 13_CD -RRB-_-RRB- -_: =_SYM -_: In_IN the_DT paper_NN -LRB-_-LRB- 8_CD -RRB-_-RRB- ,_, they_PRP describe_VBP that_IN A_NN code_NN clone_NN is_VBZ a_DT code_NN portion_NN in_IN source_NN files_NNS that_WDT is_VBZ identical_JJ or_CC similar_JJ to_TO another_DT ._.
For_IN example_NN ,_, two_CD portions_NNS -LRB-_-LRB- lines_NNS 4-7_CD and_CC lines_NNS 11-14_CD -RRB-_-RRB- in_IN Fig_NN .1_NN are_VBP textuall_NN
agments_NNS ._.
Sincetheir_JJ approach_NN is_VBZ based_VBN on_IN subgraph_NN isomorphism_NN which_WDT is_VBZ NP-complete_JJ ,_, it_PRP can_MD not_RB scale_VB well_RB ._.
Liu_NNP et_FW al._FW detect_VB software_NN plagiarism_NN by_IN checking_VBG γ-isomorphism_NN of_IN program_NN dependency_NN graphs_NNS =_JJ -_: =[_NN 8_CD -RRB-_-RRB- -_: =_SYM -_: ._.
A_DT statistical_JJ lossy_NN filter_NN is_VBZ used_VBN to_TO to_TO prune_VB the_DT plagiarism_NN search_NN space_NN for_IN scalability_NN reason_NN ._.
Schuler_NNP et_FW al._FW use_VB object-level_JJ call_NN sequences_NNS as_IN an_DT API_NNP birthmark_NN based_VBN on_IN the_DT observation_NN of_IN prog_NN
synthetic_JJ data_NNS ._.
1_CD ._.
Introduction_NN Graph_NN pattern_NN matching_NN is_VBZ being_VBG increasingly_RB used_VBN in_IN a_DT number_NN of_IN applications_NNS ,_, e.g._FW ,_, software_NN plagiarism_NN detection_NN ,_, biology_NN ,_, social_JJ networks_NNS and_CC intelligence_NN analysis_NN =_JJ -_: =[_NN 27_CD ,_, 32_CD ,_, 33_CD ,_, 35_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Given_VBN a_DT pattern_NN graph_NN Q_NNP and_CC a_DT data_NN graph_NN G_NN ,_, it_PRP is_VBZ to_TO find_VB all_DT subgraphs_NNS of_IN G_NN that_WDT match_VBP Q._NNP Here_NN matching_NN is_VBZ typically_RB defined_VBN in_IN terms_NNS of_IN subgraph_NN isomorphism_NN -LRB-_-LRB- see_VB ,_, e.g._FW ,_, -LRB-_-LRB- 4_CD ,_, 20_CD -RRB-_-RRB- for_IN surveys_NNS -RRB-_-RRB- :_: a_DT sub_NN
xample_RB ,_, in_IN Table_NNP II_NNP ,_, a_DT 2developer_NN stated_VBD that_IN ``_`` Other_JJ platforms_NNS have_VBP this_DT same_JJ bug_NN ,_, in_IN one_CD form_NN or_CC another_DT ._. ''_''
Our_PRP$ approach_NN is_VBZ to_TO adapt_VB Program_NN Dependence_NN Graph_NN -LRB-_-LRB- PDG_NN -RRB-_-RRB- -_: based_VBN code_NN clone_NN detection_NN methods_NNS =_JJ -_: =[_NN 7_CD ,_, 8_CD ,_, 9_CD ,_, 10_CD -RRB-_-RRB- -_: =_JJ -_: ,_, because_IN we_PRP believe_VBP that_IN the_DT PDG-based_JJ approach_NN is_VBZ more_RBR resilient_JJ to_TO code_VB changes_NNS than_IN text-based_JJ ,_, token-based_JJ ,_, and_CC AST-based_JJ approaches_NNS ._.
E._NNP Tool_NNP Architecture_NNP Our_NNP tool_NN ,_, CBCD_NN -LRB-_-LRB- for_IN ``_`` Cloned_VBN Buggy_NNP Code_NNP D_NNP
1_CD ._.
INTRODUCTION_NN Graph_NN pattern_NN matching_NN is_VBZ being_VBG increasingly_RB used_VBN in_IN various_JJ applications_NNS ,_, e.g._FW ,_, software_NN plagiarism_NN detection_NN ,_, protein_NN interaction_NN networks_NNS ,_, social_JJ networks_NNS and_CC intelligence_NN analysis_NN =_JJ -_: =[_NN 18_CD ,_, 25_CD ,_, 26_CD -RRB-_-RRB- -_: =_SYM -_: ._.
Graph_NN matching_NN is_VBZ typically_RB defined_VBN in_IN terms_NNS of_IN subgraph_NN isomorphism_NN -LRB-_-LRB- see_VB ,_, e.g._FW ,_, -LRB-_-LRB- 15_CD -RRB-_-RRB- for_IN a_DT survey_NN -RRB-_-RRB- ._.
Hence_RB the_DT problem_NN is_VBZ np-complete_JJ -LRB-_-LRB- 27_CD -RRB-_-RRB- ._.
Furthermore_RB ,_, subgraph_NN isomorphism_NN is_VBZ often_RB too_RB restrictive_JJ
resholdbased_VBN Exact_JJ and_CC near_RB miss_VB with_IN gap_NN Needs_NNS a_DT parser_NN ?_.
Needs_NNS parser_NN ?_.
HTML_NNP document_NN Semi-automatic_JJ -LRB-_-LRB- may_MD be_VB -RRB-_-RRB- with_IN clone_NN information_NN Needs_NNS human_JJ hands_NNS Program_NNP Dependency_NNP Graph_NNP -LRB-_-LRB- PDG_NNP -RRB-_-RRB- -_: based_VBN approaches_NNS =_JJ -_: =[_NN 141_CD ,_, 156_CD ,_, 165_CD -RRB-_-RRB- -_: =_SYM -_: go_VB one_CD step_NN further_RBR in_IN obtaining_VBG a_DT source_NN code_NN representation_NN of_IN high_JJ abstraction_NN than_IN other_JJ approaches_NNS by_IN considering_VBG the_DT semantic_JJ information_NN of_IN the_DT source_NN ._.
PDG_NN -LRB-_-LRB- 80_CD -RRB-_-RRB- contains_VBZ the_DT control_NN flow_NN and_CC d_NN
ample_JJ code_NN listing_NN ._.
encode_VBP data_NNS and_CC control_NN dependencies_NNS ._.
PDG-based_JJ similarity_NN detection_NN tools_NNS have_VBP all_DT used_VBN some_DT variant_NN of_IN subgraph_JJ isomorphism_NN to_TO detect_VB either_CC similar_JJ procedures_NNS or_CC code_NN fragments_NNS =_JJ -_: =[_NN 12_CD ,_, 16_CD -RRB-_-RRB- -_: =_SYM -_: ._.
These_DT computations_NNS are_VBP particularly_RB expensive_JJ ,_, and_CC each_DT technique_NN has_VBZ not_RB been_VBN shown_VBN to_TO scale_VB to_TO even_VB moderately-sized_JJ code_NN bases_NNS ._.
In_IN this_DT paper_NN ,_, we_PRP introduce_VBP an_DT extended_JJ definition_NN of_IN code_NN clones_NNS ,_,
rands_NNS is_VBZ not_RB as_RB critical_JJ as_IN re-ordering_JJ statements_NNS ._.
Having_VBG resolved_VBN other_JJ disguises_NNS ,_, different_JJ orderings_NNS of_IN operands_NNS will_MD only_RB result_VB in_IN a_DT few_JJ token_JJ mismatches_NNS in_IN a_DT token-based_JJ plagiarism_NN test_NN ._.
GPlag_NN =_SYM -_: =[_NN 4_CD -RRB-_-RRB- -_: =_SYM -_: approached_VBD the_DT statements_NNS re-ordering_NN problem_NN by_IN comparing_VBG dependency_NN graphs_NNS of_IN individual_JJ functions_NNS ,_, thus_RB re-formulating_VBG the_DT problem_NN of_IN plagiarism_NN detection_NN as_IN a_DT sub-graph_JJ isomorphism_NN problem_NN ._.
Unfor_NNP
P-complete_JJ problem_NN in_IN general_JJ -RRB-_-RRB- :_: comparison_NN of_IN large_JJ sets_NNS of_IN projects_NNS implies_VBZ some_DT compromises_NNS ._.
For_IN plagiarism_NN detection_NN ,_, pruning_NN filters_NNS may_MD be_VB used_VBN to_TO reduce_VB the_DT number_NN of_IN graph_NN pairs_NNS to_TO be_VB compared_VBN =_JJ -_: =[_NN 27_CD -RRB-_-RRB- -_: =_SYM -_: ._.
3Figure_NN 1_CD :_: Overview_NN of_IN the_DT system_NN 3_CD Code_NNP matching_NN process_NN overview_NN We_PRP detail_NN in_IN this_DT section_NN the_DT main_JJ steps_NNS of_IN our_PRP$ source_NN code_NN matches_VBZ retrieval_NN system_NN ,_, summarized_VBN in_IN figure_NN 1_CD ._.
3.1_CD Parsing_VBG the_DT sour_JJ
